部長 那個複製要抓去總統

所以我們直接開始進行核問

那今天大概有三個部分

一個是會議報告

然後另外一個是AI結合自動化測試

跟我們的K&N平台的報告

那一開始是知道弱點的修復

那我們這邊最後一個弱點其實在

在2月22號的時候就是照計畫進行完一轉

在3月12號的時候那個主機就已經關機

所以在3月13號的時候

弱點就已經解案

那整個弱點目前這個是最後一個

所以在2024年的弱點已經全部都解案了

那再來的話就是EOS的合規解釋

那在上個月的部分完成的最後一個

那這個EOS的話就是跟剛剛的弱點是一起的

所以其實也是一樣的東西

就是在3月10號的關機下架之後就解案

所以弱點跟EOS的部分

在上個月就已經完全的完成了

先前那個資料庫的部分弄比較久對不對

資料庫跟我們這邊還好

那比較久是因為有其他的客戶

有軋到別人嘛 那共用機嘛

我們是搬走

所以我們已經移走

那它比較晚關機是因為它有別的客戶在學

所以他們是最後才關掉

然後我們是12月多的時候就關掉了

你們12月多就撤了

我一直以為是你這邊卡住

沒有沒有 我們很早就搬走了

所以是數位他們

我們GEP吧

對嘛 GEP啦 想到了

我們12月多就搬走了

就你所知道先前卡住的那些

他們現在都解決了嗎

都解決了啦

他們也都解決了

好像是2月6號

也真的都關了

對 已經關了 弱點都關掉了

所以有服務卡到馬上會叫

對 那時候有先

關帳號 關了兩個禮拜才關機

才算嚴謹

然後再來是IT採購說明這邊

那目前這兩個都是輸進體的

第一個就是MEDIQ的

那個大檔的行銷活動

那他們最近體的就是下一檔

因為目前這一檔大概到

4月多會結束

那下一檔就是從6月到10月

那整個報價的話

就是131萬

那跟IT有關的就是35萬

那比前一檔增加2萬塊

那增加2萬塊是因為他增加了兩個任務

跟抽獎券兌換的功能

那這個簽成上禮拜

春節前就已經簽出去了

那在網型對接這邊的話

一樣照慣例我們會執行開發

所以這個算是蠻逆行的

那第二個的話就是

素卿有提一個mydata線上個人資料

申請的服務串接

那這個的話目前也不確定

總務中心那邊會不會有意見

那他們現在跟我們過來

是全案報價是120萬

那裡面含了35萬的免費

跟mydata的產品擴充

然後因為mydata

他是排網的產品

那這整個服務的話

目前是架在我們這邊

所以我們這邊評估就是專案建置人力

IT相關的是32萬

那跟前一個案子

去年的時候的C3平鎮

老的費用35萬差不多

所以這個就是看總務清單沒有意見

沒有意見的話

那邊簽過的話我們這邊就會配合去擴充

mydata也是總經理希望能導的

對

那他其實工比較大會在線上申辦

跟那個所謂的

雲端申辦信用卡的服務

那我們這邊配合的

其實就是那個排網的身份

驗證平台的擴充

你們就是驗證的平台啦

上週也是驗證的平台

那這些都是排網的產品

那這個也在上個禮拜公布先簽過去

那再來是營運報告

那這一期的營運報告

其實目前監控的項目也沒有增加

但是在三四月的時候

其實目前有發生了幾次告警

那先講APP穩定性的部分

APP的穩定性

大於99%

這邊其實目前都還是可無標準

那比較

這邊提到的告警

其實在

2月28號跟3月1號跟3月25號

我們都有收到ESPNW98的告警

那其實就是之前他們有通報的

就是ESP那邊會GQ

然後跟B家會斷線

那這個其實我們

接到告警的時候

當下都有直接反映給ESP跟B家那邊

所以其實這個還好

那再來是昨天早上

有收到Redis的OM告警

而且現在有老症狀

對那其實

因為我們昨天收到告警之後

就是有發現系統開始有一點緩慢的現象

我們進去看

其實Redis的KEYW9265

那個是

算是新高

比平常大概多了1.5倍

那收到這個告警之後

我們就趕快去處理

然後也開了新的精簡模式

到剛剛1點半的時候

消化掉

其實我們處理完之後就正常

可是因為昨天的量很大

那我們去觀察的時候大部分都是基金相關的公益

那我們推測因為跟那個川普的關稅有關

所以其實很多

基金的查詢

然後預約交易也是平常的大概2倍左右

那基金相關的機會

交易什麼其實都比平常大很多

所以昨天我們

處理完之後我們就先開精簡模式

然後到剛剛1點半的時候關掉

那在昨天大概10點多的時候

通常你現在觀察

精簡模式對系統的

幫助就是流量會少一點

對因為其實昨天

ESP他們有反映昨天早上的量非常大

所以

其實我們處理完之後就

已經比較正常了

可是想說昨天那個狀況還是先開精簡模式

精簡模式就好像裡面嘛

CLICK才會去做動作

那他省的電我們上次

客戶的時候大概省了10%

大概是這樣

那其實我們在觀察就是2月到3月

的營運狀況的話

目前跟上次報的差不多

其實整個

交易量已經實體

就是已經維持穩定在

維持穩定在131K左右

那其實這個數字

在這邊

其實跟去年都差不多

跟之前的高峰

那比較特別的會是

比去年3月同期

加了11%

所以其實在8月之後

我們的交易量平均

大概就是在85K左右

那在達日的時候會到131K

其實這個趨勢已經

蠻

蠻normal

其實在過年之後比較高

過年前後那一陣子

比較高那在後來其實降起來

就差不多就是這個樣子

所以在下一頁這邊的轉帳

跟換匯的交易量其實它的樣態

還是蠻穩定的

那比較特別的是

回到剛剛前面這邊提到的

因為在過年前匯的交易量比較大的時候

在後面幾天其實

使用的人數也非常多

那Vegas-P其實我們有觀察到

到8000多上下都也還正常

可是為什麼昨天到

9000多的時候

就會整個系統開始變緩慢

那加上

因為上次發生問題的時候我們就有再猜

可能跟基金那邊的查詢效能有關

那再加上

昨天的這個現象

因為昨天基金交易量真的是比較大

所以我們推測應該是

跟基金的相關查詢功能

是有很大的關係的

所以我們這邊其實也已經請嘉訓這邊安排

效能調教下去進行

就是基金查詢如果有

涉及到SQL的時候

那SQL的效能如果沒有寫太好的話

交易結束的時間點就會更久

它其實是在

我們之前看是在

非同步那邊的處理沒有到很好

因為在行營上線前的時候

我們就有做過一批的優化

那時候行營其實是沒有

基金原生功能

所以那個部分放在比較後面

那從上次看到的問題

跟這一次的推測加起來

我們覺得那邊的影響應該是比較大

所以我們就繼續照計畫

把那邊的非同步的優化做好

那因為接下來其實

我們還會再繼續做基金原生的功能

所以我們評估

就是這邊的優化

是一定要排進去做調教的

只是剛有藉這個機會

觀察到它應該是

跟

系統效能有很大的相關

不過我跟大家分享就是淹水

淹水的道理大家都知道

其實淹水

假設啦你們都是很無辜的

很無辜的

都很正常在使用

那淹水如果的源頭

有幾個源頭

你的服務的對象

給你的時間

它本身就非常慢

例如說信用卡

刻了一支電紋給你

你們只是使用而已

可是因為它慢

所以就造成淹水

那對你們來講

你們沒有能力去寫SQL

這件事情

所以會淹回來

就是他們在處理

另外一個是你們自己

那是你們自己的淹水

那是你們自己的淹水

但是如果是上游的淹水

一直打進來

然後那邊一直都

也消化不掉

那這時候就我們講的就是說

那也只能用簡易模式

或先前有一些簡易模式

可以減少去呼叫它的機率

那那個就是用這種方式來做

淹水的道理都很簡單

就是說你會抓到你們自己

哪邊沒有服務太好

或是有問題

那就是那個功能在刻的時候

就會造成淹水

那淹水的時候其實對公司來講

就是服務中斷

因為你到最後一定要把它重開

要幹嘛就是

你沒有重開就咬住

咬住不放

那有的更慘

以前又有那種MQ

保證送達服務這種的

你知道保證送達服務很慘

它是假設我Q了一千筆

這一千筆呢

因為它都會保證到送達

那對方一定要處理完

我Q才會結束

結果你Q

一旦對方有問題的時候

我們也知道這些縱使處理完的時候

也是死的

所以就會有人工去清Q的事情

就是去delete這一段水管

那為什麼要delete

因為你縱使處理回來

也是time out

就是已經下游出問題了

所以我在那個MQ保證送達

本來是好的東西

就會變成不好的東西

所以你們真正在處理網營的時候

或是清網的時候

你們跟有用Q manager

在做很多事情的時候

這個都是會類似就是說

需要人工介入

本來不用人工介入

就會變成人工要去重啟機器

然後重啟機器

以前是笨蛋的IT會做的事情以外

另外還有一件事情

笨蛋完就算了

他還不了解架構

那個Q還在那邊

他沒有去卡

等到他百分之百time out

那萬一這裡一千萬筆的話

你外面就死了一千萬筆

要等到

那永遠都會死不完

所以這件事情

你們有沒有經驗我不知道

但是這件事情在真實的世界上

就是發生

就是以你來講

重開機器沒有用

縱使對方也重開了也沒有用

那Q就在那裡

那這個東西就很慘

因為保證送達

所以資料都不會掉

他就認為你要請求一百萬次

就是在那裡

所以這個寫系統工程的人

了解到這一點的時候

就知道每個地方淹水會怎麼處理

那你們自己剛才講

非同步那個地方

如果有一些問題的時候

即使你上游再怎麼穩定

下游再製造淹水的部分是無解的

就像我信用卡

你發查一個那個魚餌查詢

20秒

我看你們

假設這樣子你們

你們前面怎麼做服務

所以有時候

這些東西

最怕的是你們

自己在寫的部分

例如說你自己去拉一個那個

AJAX的那種的

然後跟資料庫要連動的

就慢吞吞慢得跟狗一樣

然後自己也不知道

事實上就是自己的出來的麻煩

然後你也本來是想說

先前只有5個代號20個代號

那個AJAX很快沒問題對不對

殊不知到過了三年之後

已經漲到一兩千個了

所以那個地方慢得跟狗一樣

IT也跟無感一樣

最後就是

這個程式不是我寫的

那稍微唸久一點是指說

我覺得你們不會

只是說大家的經驗是

以後我們服侍公婆

是指說我們在服侍電腦

是被電腦玩還是自己在玩電腦

我只是講這件事情

你就是那種奴隸

就會變成被電腦玩

那真正厲害的人是解決問題

但是奴隸是被電腦玩

什麼叫被電腦玩

那個剛才講的AJAX那個兩千多個

他也不去趕他

他就遇問題就重開或幹嘛

這種就是奴隸

你的生活不會改善

然後你每天只是對現實沒有掌握

然後就會沒有去解決問題

所以我們會看到很多系統

假設我現在又引進一套系統

號稱有source code

那全部叫你們去維護

這有可能就一下就變成奴隸了

為什麼

因為那系統你沒有掌握

所以未來要怎麼去掌握系統

或是掌握別人的系統

這也是一門學問

你了解我意思嗎

你技術很厲害可是你不敢改

這也是大問題

就是我技術很厲害可是我不大敢改

因為改下去的時候不知道會

那個連動效果會怎麼樣

我只舉出來是說

大家還是有很多系統工程跟精進的空間

那你們自己玩

玩過一整套的東西玩之後

未來最苛刻的世界是去接軌別人的東西

或是要去看一個無字天書的時候

對你來看就是這樣子

每個零件

關係

還有你會遇到的東西

你的經驗就要拿出來用

去想像

然後才能去解決問題

不然就會變成說

常常有些都不敢

因為我們現在有一些無奈的東西

舉例

不管玉環怎麼樣

那我來的時候說

我們要有什麼簡易模式那些東西的

我跟你講只要資訊長不下令

可能沒有人敢去動

我的意思是這個就是可怕的地方

因為這也不是他的錯

他maybe他有那個勇氣

但是他要提出來的時候

上面的人沒有那個勇氣

所以你還是不要動

這個真實世界是會發生的

不然我說實在

沒有我講你也不會去做的

因為我今天好好的東西

我沒有必要一定要去做這樣的大的改變

所以當我們警示事件來的時候

你就發現那些是有用的

對不對

所以沒有人會去想

也沒有人會去做

這是我講的社會最恐怖的地方是這個

就是明明知道錯的

也沒有人敢去改

而這個是真實在我們運作裡面的模式

是最無奈的

所以有時候

要用時間來解決問題

這也是給你們的耐心

就是說有時候

maybe啦

可能十年前五年前

沒有人有這種想法

可能五年後又有人這種想法

總是會等到

但是你在那中間

只是我們扮演了一個角色的時候

那個叫角色扮演

你們自己在角色扮演的時候

怎麼當這個pro

這個是你們自己可以去思考

當一個pro

當這時候那個也不能改

這個也不能改的時候

你要怎麼pro

我只能這樣子講

這是一個思維

而不是抱怨

這講的就是這個

因為什麼叫無奈

你們想像一個

如果我執行長什麼都不懂

我跟你講不可能有這些政策出來

也不可能有這些策略出來

好

那你能保證未來的人都是很厲害

什麼都懂

或是什麼樣

或是你一講的時候

他說對對對你趕快來做

我覺得不見得是

但是我跟各位講的是說

所以人在工作上是要學習

那這一點是指說

大家有多一點耐心跟學習力

這是最重要的

因為沒有真正的對錯

我剛才講的那個情境

就是真實的情境

你可能even到任何一家公司去

你想要怎樣的時候

人家也不buying

他覺得說你幹嘛把我的MQ拿掉

或怎麼樣

你懂我意思嗎

說這個會有問題

他甚至他不覺得那個東西是有問題

或是你要把那個open source

改成open source

他也覺得不要

第三方元件他禁止使用

我舉例

他說第三方元件禁止使用

他就直接下一個命令給你

那我就問你

你能接受嗎

你們都現在跟大家open綁在一起

那現在動不動跟你講一個

第三方元件禁止使用

那你就會覺得說

我很累

所以只是講一件事情

所以真槍實彈的時代還是會來臨

只是說ok

這個會變成怎樣

只是讓各位知道

你們就要跟變形蟲一樣

那我們經過這麼多風風雨雨

我們有一些經驗

那這些經驗呢

就是大家要怎樣去carry下來

然後適時的拿出來用

適時的拿出來用

那反正不要同流合污就好了

那某種程度要保持自己的專業性

這一點

專業性跟有個性是可以切開來的

太有個性也會造成自己的傷害

那所以這一點就是給各位一些引導

因為各位在這一塊來講的話

這個團隊我覺得

大家都在很努力的往前學習

但是這個過程我必須要教各位

就是在這裡面就是

有這樣的一些情況

那大家要能去有那個韌性

可以去調整

然後可以讓自己未來有更

更好的發揮的專業空間

因為很多人都不懂

並不代表你要跟著他們不懂

了解我意思嗎

但是太過突出的時候

你要怎麼去用不同的方式來表達

所以你不能講說

我跟你講你們只要講出一句話出來

以後你們就死

以前我們公司怎樣

我跟你講這一句話一定死

我直接跟你講一定死

為什麼

因為你就是批評人家的東西很落後

所以我當然不是講

未來合併的公司一定是這樣子

我講的是指說

我的情境是這樣子

我如果比較厲害的時候

我就會蹲下去奇怪怪的

你知道我意思嗎

你要是厲害的話

你就會看到一些不厲害的

那看到不厲害的時候

你就嘴巴就很容易

就很容易

了解我意思嗎

那這樣子對大家不是太好

為什麼

因為我還是變成反過來

是跟大家講一下就是說

我覺得在適當的時機跟大家講就是說

IT太IT

你現在趕快讓大家知道說

這個我只是講

剛才跟玉環故意稍微套一下

就這樣子

我不在的時候

一輩子也不會做這些事情

因為沒有人敢下命令

他也不敢主動

你了解我意思嗎

不是他被動

是沒事換了一大堆風險

然後最後到底誰來扛

因為人是風險導向的人

例如說我

玉環說

我覺得你這件事可以這樣子做

然後到時候出問題的時候

我靠我在扛風險

因為到時候都是我決定的

所以真實的世界就是這樣子

就是縱使你有好idea

你為什麼會縮起來

就像路人你去救他的時候說

你給他撞到

為什麼台灣會後來有一些冷漠

就是因為看到有人的時候

你去幹嘛的時候

還說你撞了他

假車禍

所以某種程度在職場上就是如此

但是我不是叫你們要這麼悲觀

我話回來就是叫你們不要悲觀

這些事情我只是鼓勵大家

不要太IT

不要太天真

很多事情不是你看到的那個樣子

但是自己專業要顧好

這件事情就是鼓勵大家一下

沒有別的意思

就是說我覺得我還是有時候

除了教你們做事以外

我覺得做人也很重要

有時候就是進退要得宜

這一塊有時候就讓你們稍微知道一下

因為突然有感而發看到一些事情

就會覺得說

這些以後大家也要注意這些事情

因為越是科技人

越容易犯的毛病是大同小異

這樣了解我意思嗎

像我都是在追求

那你就會犯了跟你們一樣的毛病都有可能

所以我是有感而發跟你們講這件事情

而不是說鼓勵你們不要追求科技

不是科技在心裡的時候

跟人家不一樣的時候

你要怎麼辦

所以科技不是一切

科技會左右你在評價價值的時候的

觀念會改變

那這個觀念改變跟人家

就是不相容的時候

你活得太痛苦也不行

這個大概跟大家講

那感謝教授的分享

那剛剛那邊要講的就是

其實我們除了監控之外

那從監控中間看到的一些東西

我們會排列做優化

因為我們評估我們成長量其實是更高的

不應該在這個狀況下就開始緩緩

所以這個我們陸續還是會做一些優化的措施

那再來這邊這一頁要講的

是我們這兩個月的業餘班的執行狀況

那在上個月三月的時候

我們這邊班內team有多了一個新的總管

那就是Ben

我叫黃哲偉

那我是33號的高校委員

我前一屆的公司是在羅道尼康

那現在也是加入我們班內team團隊

那目前會讓大家進行的是

基金的原生轉換儲備的部分

說原生是準備用什麼做

IOS還是Android

都有,都是原生做

因為現在是SSO

那我們ESC的專案會把基金的交易功能改成原生

那這邊的話會負責中台檔內的部分

OK,所以他還是負責檔內的部分

他還是負責檔內的

那我們這一次後面會再講

就是有做一些跨品牌的嘗試

那在業餘班這邊的部分

其實在三月目前的業聯單庫存量是下降的

因為現在其實我們重點就會比較放在

BSC的專案上面

那其他的需求開始會漸漸的比較縮減

OK

對 那右邊這邊的話就是三月的上限的部分

因為現在我們盡量讓業聯單的項目縮減

所以我們可能一個月只會上一次比較大的東西

嗯

就是不會再那麼頻繁的換版

OK

那這些東西呢 下面會再比較詳細的介紹

嗯

那

OK 那接下來這邊就是持續在進行中的項目

那第三張套件跟全行API檢測這邊

還是在配合處理器他們那邊做盤點的狀況在進行中

那這邊我們自己在進行的話

就是每一年的插構升級跟Android 16的升級作業

開發工 算開發工具喔

對 因為它每一年都會有版本提升

那我們這邊就要做一些相容性測試跟回饋測試

跟fortify的問題調整這樣子

那目前的話這兩個部分都預計在四月底前會完成

它提升的目的也是跟著手機版本隨時在換版有關係

對

所以它開發工具就要把一些舊的部分做一些轉換

才會不會出問題

對 它會強迫升級

然後有一些棄用的東西就不能再用

棄用API什麼之類的

所以你可能以前的撰寫方法是在

例如說早期那個版本

那現在剛好換了一個大版

怕你的API壞掉

所以用新的再重新build一次

測一次

對 然後有一些風險什麼的

跟像我們有做夾殼

那夾殼可能也會有相容性的問題

所以那些都要做測試

每一年例行性的作業

OK

對 那再來這邊的話是我們的後台

那目前的話

有兩個項目在進行中

第一個是新的強制版

跟這個目前差不多預計在這個四月底的時候會上線

那再來就是往新的戳碼為主

因為我們從舊的DB引到新的DB之後

以前有個系統叫三合一的平台

那那個平台可以去維護戳碼

因為它是很多系統共用的

所以那邊我們也棄用

就是我們不再跟那邊

不再從那個系統去做戳碼維護

那把這個功能搬到網民自己的後台來做

那這個的話目前是雲行這邊在服務

那其實它開發的也差不多了

那再來的話

這邊也是需求跟問題的執行狀況

那在Bug數的部分

其實在一二三月

目前有發現

一年有百年的Bug我們都已經解決

已經上線

那所謂目前

production的版本的話

應該是沒有比較特別提出來的Bug

那在這邊的話

就是進行中的重要需求

那第一個是信用卡消費同時優化

那在我們往新這邊的部分

其實我們都已經上線

跟退貨平台都已經上線

那接下來是等卡布他們在

那個簡訊系統那邊

他會在四月二十五號的時候做切轉

所以等他切轉完這個案子就結束了

那再來這兩個的話

其實第一個是

實名APP的如卡提款取消功能

那這個其實是

資金部為了體驗優化做的一個調整

那這個也已經在三月那個版本上線

再來就是帳單分期的部分

這個是卡布他們之前提的很多需求

那這個是他們接下來

希望要做的東西

那因為這個

對收益會有幫助

所以我們接下來就會爬進去跟他做

需求的分析跟開發

那他其實預計的完成時間是在

今年

那因為現在可能有空就會查得住

先做系統分析這樣

等一下喔

如果你要上線的話

是到二零二五年十二月是不是

我們做好就會上

保守附近

因為其實卡布跟數金部

他們現在的溝通沒有很好

就是他有需求

他也不太敢直接提

那整個需求的排序

其實他們也沒有壓到那麼緊

那我會提到這些東西

因為

你可能到時候要切

一群同仁

針對你

就是predict

轉出的作業的規劃

然後呢

就按照那個規劃的

一個

心儀事實上要轉的東西

maybe不多

但是那個規劃部分呢

可能可以找一個人

開始進行pilot run

那pilot run就是說

對方沒有規格我要run什麼東西

所以我覺得只是說一個

應該是說做一個

做一個

預留的一個

時間點

我覺得公司會run的時間點

當然不要講run

就是又在整併又在推行業務

在這個過程當中

你可能上次我有講我盡量不要讓

讓同仁有接觸到

轉換的事情

因為對我來講策略定好之後

所有的事情是不用跟著忙的

只有轉出

那轉出的部分上次我們就會predict

一些規格

基本上就是一個

最後一定都是一個output

那output的部分

先做初步的研究

然後跟mapping

然後那個部分

你上次做了沒有

就是針對如果我要針對

哪些是轉換必要的一些欄位

提供你的documentation

跟準備的一些文件

那個都做了是不是

那個都做了是不是

那個是針對

針對如果

有一份規格來的時候

我要怎麼去做mapping的動作

相對就是業務規則的mapping

所以

可能要找一個員工

先

就是到時候會occupy一個員工

先做這樣的一個

規劃

我上次有講過

我們整個轉制策略的部分

大概未來讓你們大概知道

那個型態是這樣子

就是對方給你規格

我當天就直接review

所有的規格

然後

告訴他答案

這個可以這個不可以

這個要開會這個要幹嘛

就這樣

然後再來下一個

他不服或怎麼樣要上訴

你一樣來馬上隔天就給

然後再來

final down之後程式寫完

一個禮拜之內

甚至我希望當天都給

基本上

我會把它當作

最緊急的需求

然後呢

不跟你脫台前

就是脫台前的意思

是說為了討論

這些東西

浪費一大堆時間

對我來講是這樣子

我不是只有針對你這個

even是台外幣的那個複雜的

那些我都一樣

我都希望

所有的規格來review當天就回去

當天回去完之後

final down完之後

我的員工

早就在編寫程式

那你還來不及的時候

資料已經試轉第一批第二批第三批

包括歷史資料怎麼轉

那個都規劃好

所以我的意思是說

我對其他的員工來講

是無痛

無痛分娩就對了

就是說我在轉換過程當中

不用跟著玩

幫我實現這一點

我覺得做得到

意思是說

你們公司真的有在合併嗎

沒有啦

沒有在合併

對我們來說從頭到尾沒有改變

我做到這一點

就是醫師只說

開會只有你一個人在忙

其他人不用

因為

開會都是聽那些沒營養的東西

完了之後就確定

spec規格而已

講那麼多要幹嘛

不是這樣子嗎

你一大堆人拿箱跟著拜要拜怎麼辦

沒意義

一大堆人在那邊開會

權益要嘛就把權益轉出去

要把基本資料轉出去

交易要轉什麼

你就define好

你的mapping是怎樣就講好

out of control的東西

我就轉個垃圾給你

對我來看

就是把規格弄完之後

員工無痛

因為我們開會的時候

很簡單

例如我跟人家講

以後你們工作遇到什麼

那個對你

真的是人生幫助而已

但是事實上對寫程式

對我來看是沒有意義

轉規格也是很活生生的例子

你跟我講什麼

什麼東西

講了一大堆業務規則的東西

我現在東西要轉給你

你要了解我的業務規則不重要

是這些客戶你要怎麼用才是重要

就是我把客戶基本資料轉給你

有權益的轉給你

你要怎麼做

該轉的我轉給你

就是這個

所以我那個策略很清楚完之後就執行

所以對我來看

我的員工要無痛

沒有說

你負責這個

你就負責那個

好像每個人都負責一大堆轉資的工作

沒有

理論上不需要

理論上不會有這個動作

所以我到

換招牌日那天

我們公司不是很忙嗎

都在做轉換

你可以跟你的朋友

沒有一點都不忙

我要的是這個

如果是每個人都

催眠都自己很忙

那就表示我們規劃不好

所以我要的是這個

然後呢

我就看

明天轉給你你要拖多久

你們有玩過麻將嗎

你聽牌前面八張牌就聽牌了

我看你怎麼玩

你嚇都嚇死了

我還陪你玩

對不對麻將落地八張牌

我聽牌了我看你怎麼玩

你應該是只能等死吧

對不對那叫天聽了嘛

地狐天聽嘛

就是這個意思

意思就是指這個

所以要不要做到這樣子的時候

要充分的準備

所以玉環文就靠你

你就是直接把這些轉字都弄好

讓員工無痛

無痛的字

是說規格就這樣子麻煩你幫我轉

甚至Mapping Cable

我直接幫你寫好程式

直接給你

差一歲就差這樣而已

說實在那個反而沒有你們在寫那個

Screen Control

那個來的複雜

因為他沒有Control

這樣知道我的意思嗎

他沒有Control

他完全沒有Control

像你們在寫UI UX

還有Control

對不對Flow Status

他完全沒有

這種程式

我就說Mapping我們來玩

玩完之後就一天讓他

天狐

就直接就結束了

那我想的就是

原來就是這樣子

所以員工到最後一天的時候

我們公司合併無感

沒有感覺

你們就全力的

全力的開始把自己

現在一樣在做的一些事情

可以讓自己的Skill Set

更完整

所以我們現在要求我們這些東西

我們一樣就是

精益求精

大家不斷的去

Cowork

讓大家團隊繼續

Cowork

把這樣的精神不斷的去延續

所以各位去學到的是一個精神

而不是學到是一個

人家說心肺在轉換很忙的

沒有這個事情

就不會有這種事情

所以各位就可以抬頭挺胸

意思指這個

所以我想就是年輕不需要花精神在

在我剛才講的那些

剛才那些我們

我們在講的說

我就跟你講真正的重症

even是核心我都會要求到這樣子

所以就拭目以待

就是意思指說

反正

沒營養的會是我們來對付

就是這樣子

阿苦工

苦工瞬間解決

所以我剛才對你們的評價

很簡單

如果那些東西

就是一個layout

output成這樣子

都是你現在差不多的

了不起

date變成6碼8碼

或是1變成3

3變成5

或是這兩個欄位判斷完之後

if else就跑到這邊

阿這種程式

我覺得好像沒什麼

對我來看

比你們寫那個

寫那些screen的

控制的

排版的

每一個都還比這個複雜

所以我還是強調這一點

是指說nothing

就是指說

勇者無懼這一塊讓大家

更有底氣

讓你們就是

相信預防

這樣我壓力就大了

其實經理長很難

跟大家分享這件事

因為經理長玩AI玩很深

他有用一些AI的東西

來輔助我們做資料

轉制這件事情

經理長希望大家

把時間放在自己

技能的精進或個人組織上面

不要把時間浪費在

開轉制規

這種事情上面

好繼續

那需求的部分

我們還是

快速講一下

那這個

行營的非綁定裝置

分路告警

其實在2月26

的時候就已經上線更換

要求已經上線完成

那這個

MT改0X

在等

等

財經嗎

等他們做測試

據聽說他們現在

有提的就是

財經那邊本身就有

我們這邊其實已經測完

等他們做整個測試

再上線

然後再來是在法規面的

信用卡線上掛飾

在行政上面做的申報

這個也已經在4月1號的時候對完

然後匯率到價通知

這是監控要求的

也已經在4月1號的時候對完

然後再來是

財管部

他們之前有一個比較嚴重的客訴

就是網民基金投資增加高齡

條款的判斷

這個也已經在3月31號

那後來他們

針對長效在那邊有做一些調整

我們也有配合

財管的要求在

4月2號的時候

已經做了一些修正

那再來就是

主管機關的調查

就是新APP的英文版

那當初

數據入回是回

今年5月前會有新的英文版

那目前我們會在

4月底的時候先上一版出版

因為其實有些功能一直上線的時候

它會越來越差越大

所以我們在4月底的時候會先上一版出版

那現在像這種

東翻英的那個

現在這個時代啊

越來越簡單對我們來講

以前都還要去考慮這些東西

那現在不是大概都是有一個外掛的定義檔

定義完之後就

tag上去就

就直接replace了嗎

對可是我們還是要做一些

排版的位置還是要小心

這個就是英文版介面的示意

這邊是中文

不能因為英文漏漏登

結果就整個位置跑得很離譜

我覺得時候可能會破版或幹嘛

所以我們還是要做一些相當性的調整

那再來就是如果它名字過長

可能就是要請它換縮寫

對嘛

就盡量以排版為主

對所以其實這邊是

基金總覽這邊是投資類的

英文版面的樣式圖

那4月底的時候

對阿像現在這種東西的話

比以前又更簡單

你只要下個

下個指示它就ok了

就是我把它英文版中

那因為我版面的關係

然後請盡量幫我

控制在

多少個character

就弄出來了

哈哈哈哈

沒有啦我的意思是說

我一來先不要去管UI

就是中翻英的時候我就先

翻譯人一組就已經是

字都會自動縮小

素進體驗他們還要

確認那個翻出來是正確性

那沒辦法

為什麼說沒辦法因為它已經縮了

已經縮了

所以縮的那個翻譯性

是見仁見智

所以我覺得那個也不用靠

人類來做要是我的話

就直接那樣子就差不多了

所以只能說你要限制多少個字

大概就是先確定講好

然後現在再來就一個指令

就全部replace掉

然後再來你版面就不要再調了

意思是什麼意思

你的問題已經不是

中翻英的問題

沒錯沒錯

版面會跑掉的問題

所以版面跑掉

你一大堆虛擬工業幹嘛

對我來講就直接一來的時候

就決定採用AI的方式

就是直接一條指令就結束了

然後我的那個中文

現在的character的byte跟長度

我這中間只要跟他講說

考慮到這個部分的長度

多少個pixel

所以我現在英文也只有多少個pixel

maxma是多少個pixel

請幫我調整

適度用簡寫的方式

像這個提示詞就會剩下

就一次搞定

意思是怎樣

你現在在做的跟素卿在做的

他一定要說這在調就在調

那就是浪費生命跟時間

在我眼中是浪費生命跟時間

為什麼

因為他有他的主觀性

你懂我意思嗎

所以

對我們來講

對我們來講

是配合條

但是很無聊

那再來這邊是

基金驗證下單功能

預計在四月底時候會上線

預約交易的查詢跟取消

預約交易的查詢跟取消

比較大的差別

就是在畫面的資訊介紹上

也是比較清楚

再來就是

結合

生物辨識的功能

可以比較快速的做

基金的

預約取消的功能

然後再來是

整體的

ESC專案的時程

目前是到這邊

其實在預約交易取消

跟基金儲備

規劃上面

跟順境部的體驗

跟一些

邏輯的討論上面是有些疊

因為他們有些部分想要做更好

所以我們就多花一些時間去協助他們

做這一塊

那目前其實在這邊

這邊有從live schedule

大概七天的時間

在基金儲備部

上線的時間

那預約交易

跟取消的功能

目前還是預計會在四月

上線

今天會發版

因為中間大概會有一些討論

所以其實在中間的過程中

我們也有

做一些優化的東西

然後再來是這個案子

其實像

忘記名字了

瑞凡

在和凡跟閔夜這邊

他們其實也有做像上次經理講的

跨平台的學習

像這次他本來是寫單位的

那這次他負責是iOS開發的部分

那裡面這邊是

iOS工程師

這是他寫中文的部分

就是有做一些switch的嘗試

那也蠻順利的

就是在預計交付前

完成了這個功能

然後做測試

然後再來就是

剛剛提到的英文版介面

目前

柯主的

報告到這邊

接下來會是

群靈這邊的自動化

測試結合AI的

進度

這個是

AI

應用

AI API

應用與自動化測試的部分

那首先的話

我也先說明一下

舊方式自動化腳本流程

跟新方式自動化流程

的差異

然後再做個比較

跟效益的事

做個說明這樣子

做個結論

那首先講一下

舊有流程的挑戰

就是主要是說

我們舊流程的話

就是

首先要經過

先開啟這個介面

先把

定位

app的定位

然後手動下載檔案碼

然後再把這個檔案

抽取下來

請AI生成

這是檔案

那這個問題主要是說

它有一些手動化的操作

效率比較低

那有可能

沒辦法做批量處理

那這次我們有做一個

調整跟優化

然後後面會講

那首先大概再回顧一下

操作的流程

一開始先啟動Appearance Inspector

然後我們開啟

模擬器連接

然後導航到目標頁面

然後我們就下載檔案碼

然後再貼給AI

請AI生成檔案的提示詞

然後最後我們就整理一下

檢查一下AI生成的內容

然後就是我們必須要手動去

複製程式碼

把這個程式碼貼到我們的專案上面

這個上次我講的

我都知道

然後這個其實有一些優點

其實一般人新接觸的時候

Inspector它其實介面是很直觀的

然後AI對話

它可以不停的去嘗試提示詞

生成多樣的內容

但是它的缺點就是說

它可能處理速度比較慢

然後它有一些手動的成分在

那大概是這樣

它有一些缺點的部分

然後

新的方式的話我們這次就是有

稍微調整一下

那我先講一下

流程的步驟

我們先配置腳本的參數

這個流程我們現在可以自動連接應用

然後在操作應用程式的時候

它的歷程可以自動去下載SNL

並且我們可以從SNL清單裡面

去讀取我們要的測試案例

我們要的測試功能

所以你是先把所有的頁面放成資料庫

變成它的KML

類似這種概念

你把所有的XML

放到一個資料夾下面

等於是放下來給它

對對對

然後給它放在

等於是它的分析的一部分

然後讓它去找這個腳本

它現在是要

等於是模擬頁面那一塊

等於是你都給它弄好了

20個頁面全部都在那裡

對對

就是假設我們要測20個或是5個

我們就先

就把它變成資料庫了

記得要資料庫的概念

資料夾啦

對對對 資料夾

那這個有一個亮點就是說

它可以去多現成的

就是整理這個頁面的結構

然後再上我們可以

我們這次有整合AI的API

就是用

你這次有

你花哪一家的

就是Cloudy的

對

但是那個是10塊錢美金

等一下會講

25塊

25塊

25塊美金

然後用完的時候

你是實驗性質的嘛

對不對

對 我等一下會講用多少

那你花自己的錢嘛

對不對

是

所以要請求資助

哈哈哈哈

請資助收益

哈哈哈哈

請資助收益

我自己花很多錢啦

哈哈哈哈

沒有 用API才做得到

你用checkbox的那個做不到

所以你們以後真的要

當AI工程師的話

你這叫做起手式

你後面還有更多

你難以想像的東西

例如說

我講更深一點

那

你當一個系統工程

或是KM

或是怎樣

他那個資料庫非常大的時候

他也不可能

例如說我呼叫100個頁面

都丟給他

然後請他說

number第幾

萬一有1000個頁面

你根本也丟不進去

所以你沒有辦法

由裡面他再去找他

用大圓模型去解決說

1000門之一去找到

他沒有辦法

所以到最後的時候

還是要用RAG來解決問題

所以變成說

那一塊就是有點像

字典跟索引的意思

因為再怎麼樣

AI就是小腦就是

最多就那樣子而已

所以你不可能把所有的文件

丟給他

所以先前會做KM

會失敗的原因是因為

所有的文件

那有的人更是更離譜

他把整個我們以前那個

project裡面的所有程式

竟然你要丟出去

還想問AI說

我這個程式怎麼改

我跟你講那個就是完全

高估了AI的能力以外

就另外一個就是

他不是all you can eat

所以你像這種小量的

20個頁面

這個都吃得了

就是全部都放在他那裡面

然後一次叫他開始

怎麼去找number

什麼那沒問題

但是一旦

超大型系統的時候

包括使用者手冊也在裡面

甚至你的那個API

我們在拿API的規格

反正都寫在那裡面

那樣子的系統文件

在裡面的時候

有可能就把你的AI就灌爆了

這時候他幫你寫程式

也寫不出來

所以通常只跟各位講說

起手式你們先玩會之後

以後就會玩到

我剛才講那個進階的

進階的意思是說

像這種就是針對一個

我們講的說

中小型系統都沒有任何問題

像我們先前那個

財經公司的什麼FED

那叫做小型系統

那一個下去之後都沒問題

那都沒問題

但是一旦你的系統

變大的時候

你要叫AI幫你寫程式

是難在哪邊

規格書餵進去了沒有

ER diagram餵進去了沒有

遊戲規則進去了完之後

還有包括你的sample program

要怎麼寫

還有這個我們講的

比較detail的部分是說

要讓一個

我只是用口語話講說

我要增加一個頁面

類似轉帳的頁面

但是我要增加一個客戶

或是什麼樣

類似用口語話

他就幫你寫程式

這不是難事

只是說那個需要怎樣

需要你的完整規劃

跟我剛才講的那些東西

所以現在

另外一個team在講的

就是類似這樣子

我又要一個東西

他就把我準備幫你刻的

UI UX長的這樣子

然後新增三改查

也都幫你弄好了

然後這樣子的操作

OK

完了之後

大概就是類似一個SD的文件

再來就是直接程式寫到完

連測試都幫你測完

那意思是什麼意思

意思是說no code

no code要做到這樣的時候

AI也不是萬能的

不是

所以API是必要

那到最後的時候

你會發現就是說

像

氣網銀GDB

我本來要做到這樣子

那後來我把

把他的那些元件

那些他們已經

Library化的這些

共用元件這些

還有workflow

他裡面有flow engine

怎麼用怎麼用

我都

都把它精簡化放在AI裡面

那我就開始

他說我現在要規劃一個

就是整批轉上的功能

整批轉出的功能

他就開始寫

就開始寫

他是用MVC架構開始寫

那這時候他有用到

workflow的功能

放行修改沒有任何問題

也就是說那個程式寫出來

基本上是按照你的

公規的版本去寫

但是你規格如果

他們最失敗的是什麼

後來他們也不敢用

因為他們一輩子

應該是說要新增新的功能

機會是零

為什麼是零

因為他把所有的程式

全部做壞了

所以他程式胖到一萬多隻

你請問那種程式怎麼改

他本來是模組化的

本來是用50行程式

或是一

大概200行程式

就寫得完的東西

可是你會發現

他隨便一支程式都是一萬行

他的sample code是一萬行

連AI都吃不動

然後呢

客戶的程式上版的東西

都是那一萬行的

那我問你

你敢改嗎

客戶已經在用了

那我現在剛才跟運環講的事情就來了

我想改造他

可是我老闆會跟我講說

不要

為什麼那客戶都在用

你現在突然給他改造完之後

不知道那功能會不會壞掉

因為你要重寫

就是我就講

那為什麼會有一萬行

這件事情跑出來

那就是我講的

IT就是複製貼上複製貼上

貼到那支程式

搞到最後就是一萬多行

那一萬多行根本沒有人類可以維護的了

好不好

所以很多東西就變成不敢改

我跟各位講

這就是小兒麻痺最後的IT的結果

就是換也換不掉

這我講的

我們可以批評

但是你敢換嗎

這幾千個客戶都在上面用

而且都是大客戶

你換了

你現在當正義魔人

你真的換了

他出問題就是我剛才講的

所以這個就是講說那個魄力

我跟你講

像這種東西就是這樣子

那魄力就是說

這系統不用了

就換掉重來

或是重寫

重測

那為期一年

測到OK再上線

這叫做決策

因為這種程式會造成我的員工小兒麻痺不敢改

明明是原件化的東西全部變重刻

明明是原件化的東西全部變重刻

那你覺得這世界會變成怎樣

所以我覺得很奇怪

我為了用AI寫出來的程式

不到兩百行三百行

薪資轉帳的程式

不然到那時候才一萬行

哪有可能

因為本來是有公用資料庫的

沒有

它就會變成用標準檔內的去重寫

你這樣你當然

我跟你講那些有什麼新增

就是我們講的那個新增三改查的模組

也沒有用到

就變成原來變成你重新刻的

那見鬼了

我的意思是指說這個就是

就是通常

我說實在很多人就是整套拿下來copy一下

那就越刻越胖

那我只能講這是一個過程

那只是說現在活著的人很痛苦

所以他們那時候要改造的時候

我說你們要小心一點

慢慢改造

對啊

因為連你後面接手的人也看不下去的時候

就是這個意思

那我們可以現在接手的員工是最可憐的

那個AI都沒辦法解決

我本來試圖要幫他們解決

我可能重寫的程式

薪資整批轉帳的程式

可能還不到三百行五百行

可是去看他的程式的sample code

實際還是要一萬多行

連那一萬多行一位進去的時候

AI就說out of memory

光是一支程式丟進去

out of memory

那是搞屁啊

所以我就覺得說那個很離譜

所以現在講的這個東西就是指說

你們在用AI的時候

現在是小範本

以後就是大文本

那大文本要懂得切割

那切割的時候就要有字典

然後去抓這個是我要的

這個我只要的

然後進來再丟進去

再丟到AI

這樣子就可以幫你做真正的文本切割

跟所謂的

就是你可以用大語言模型

來幫你解決問題

那你現在這個做法沒有任何錯

因為我們通常在做的時候

只要吃得動

我不需要

吃得動

就是你買那個API應該是兩百K

你丟下去的東西都夠

應該夠

應該夠

所以你不會造成壓力

那你知道我現在玩的遊戲

我現在給他們遊戲

那個很難

那根本都是全部要用IG的

因為你丟不下去

丟下去就我剛才講的

一萬堂下去

out of memory

那個AI也跑不動

所以你必須要在這一萬堂裡面

挑這次要用的東西

丟上去讓他分析

那那個就難了

因為那個是我們先來處理

AI沒有介入

所以那一塊就是我們工程師

在先做切割處理

這一塊最難

那個就是我剛才講的

就是說冰凍三尺非一日四寒

就像我們現在人員進進出出

每個人文件做的2266的

或是有的有的沒有

所以會有這種狀態

所以有時候我們丟進去的文本

都是髒的

或是範例也是髒的

或是過時的

所以我們就會開始發展就是說

第一個文件要怎麼做得好

這件事情就是一個重點

所以未來我們要做KM

你們剛才等一下有KM

KM最大的重點是

你丟進去的東西

如果你是經過整理跟優化過的

你就不用那麼多東西

疊床架屋的東西太多了

那大語言模型可以幫你補一些

就不用什麼都丟進去

所以這個是KM的重點

我只是跟各位講

就是說你需要跟我講

MVC架構怎麼寫

根本不需要

大語言模型會

類似

所以很多東西不是什麼東西

就丟下去就OK了

沒有那回事

對我來看是

所以真正要玩AI

工程師這一塊是必須要再用心才可以做得更好

那這一點是題外話

只是說你們現在還沒有遇到大的系統

但是大的系統一定用得到

就是我講的這麼多本書要怎麼

不可能丟下去

那那個是最痛苦的

就像你不會丟Selenium的手冊在裡面嘛

Opinion的手冊你不會丟在裡面嘛

因為大語言模型已經知道了

意思是一樣的

你們現在很多KM

有很多垃圾根本不需要丟進去

那就是沒有整理

丟進去只是增加你自己的壓力

最後你AI不能用

這個就我講的

所以你們裡面有多少垃圾

這是KM成功的因素

KM大語言模型已經比照一個大學生

那你把小學生的東西丟進去要幹嘛

我這樣子講你們就知道了

所以你分析要有力量

是要靠這些來預先處理

所以你們KM完的好的人

到這一塊就是重點

你這一塊跟KM無關

你這是要自動寫程式

自動寫程式跟我剛才講的

那個模組化

那個function library是什麼東西

你要讓它可以隨時調用

那個重點要寫好

假設我是API

我就會把RESTful API寫得非常好

什麼都不用講

就光是這個就夠用

就可能類似這樣

就像你要呼叫電文

你們大部分都呼叫電文

啊打內有幾個重要功能

那個放進去其他都不要了

程式自然會寫出來

什麼都不用放

類似

那一個sample code就是一個sample畫面

那隨時就刻出來了

iOS的都一樣

所以對我來看就是說

你們要寫到自動寫程式這一塊

也不是不行

以後都可以玩

我鼓勵你們玩

為什麼

因為

再說一個問題

你們是有原生性自己去規劃功能

例如說打內中台是自己規劃的

ESP也是模組化的

有模組化的就可以做到百分之百

沒有模組化的就是

全部用open世界去組來的

這個沒辦法

難度很高

所以你們現在做的東西

都是自行開發的

所以你們成功的GDP是百分之百

剛才那個team也是

都是自己開發的

百分之百

只是你們要走那條路

我是鼓勵你們可以走這條路

是指說

以後只要你自己刻的元件

workflow

包括頁面

你的遊戲規則都是你訂的

這種東西只要文件寫好之後

我跟你講

自動寫程式一點都不是夢

我可以幫你們實現都沒問題

那通常是

你們自己本身

這個元件裡面明明有八個參數

怎麼交代怎麼使用都不講

例如說有一個函數

裡面有八個參數

然後裡面有很多condition

愛講不講的肉講的

我跟你講你那個AI寫出來

沒有幻覺我在隨便你

因為你那八個參數才是最重要的

那是你刻出來的

你都懶得講

那你一樣

你懶得講

A員工來學的時候

只要給他一個sample code

他也不知道只用這兩個參數

其他的都不要動

其他的不要動

靠夭

這個就是怎樣

話說一半

你明明有八個參數

這就是文件做的爛

那文件做的爛

不要再跟我講AI怎麼自動化寫程式

光是你自己刻的函數都是這麼爛

所以很多事情

我可以猜

但是我會猜錯

舉例來

你命名規則

CUSTID客戶號碼

TELNO電話號碼

ADDR地址

你會猜

AI也會猜

這個不是難事

但是最難的是什麼

就是參數

怎麼用都沒有講

那個才是最恐怖的

譬如說

樣板

樣板1是什麼

樣板2

假設有個樣板

number 1 number 2 number 3

樣板的功能在做什麼

沒有講

那請問AI怎麼幫你寫程式

我舉這個例子

讓你們知道說

原來AI是可以幫你寫程式

只是說

特別是我們

我就跟你講

如果讓我開電腦公司

各位全部讓我害了

我跟你講

我們這個軍隊會超級可怕

為什麼

因為你們是DRIVE

AI去寫程式的那一群工程師

從來沒有人真正在做黑手

因為

我剛剛用嘴巴講話就可以寫程式

因為那些已經是

dirty job

所以未來的世界是什麼

是你

然後那個叫做junior工程師

就是AI

這裡就是文件

所以文件寫得好

就好像你進入一家公司

你會被寫程式

是看

不是拿人家的source code看了老半天

這樣子很辛苦

知道我意思嗎

這樣的日子很辛苦

拿source code慢慢K

這個很辛苦

那如果呢

你今天只要給我RESTful API

電文的規格

所有的你的函數的相關會常用的東西

全部都在這裡

我好像進到百貨公司裡面來

我根本不用人家

我不需要人家

我剛才講的那個我就可以實現掉

只要了解這些東西就結束

再來啊

什麼寫得很複雜很多

其實不會不會不會

那個只是時間問題

那時間問題就交給AI就結束了

意思就是指說

你能會覺得很複雜的東西

反而對電腦

對AI來講就不複雜

反而是這裡講不清楚才是可怕的地方

所以你們要用AI寫程式

你這一塊

你都有運用到

你就是

你會越來越清楚

不清楚才是最大的敵手

那這個大概就是針對你這個

等一下我們繼續分享下去

但是我剛才講的都是

用AI寫程式這一塊

但是還有知識庫這一塊

這兩個運用

你們今天都有主題

那我只是分享一下

有經過的路

趕快跟你們講

沒有經過的人

才知道說

AI不是萬能的

當你亂丟一大堆程式進去的時候

你是要做單點的

什麼叫單點的

你幫我看看那是在幹什麼

那種很無聊

這支程式在幹什麼

for loop

他大概在做什麼

我跟你講

問這種的

是叫做問答題

無聊

一點意義都沒有

我們要的是應用

幫我做一個開戶的流程

我未來是這樣子做

你幫我做一個開戶的畫面

然後請幫我規劃

用我現有的函數跟畫面

然後初步的案子

先給我讓我看一下

OK完之後

夠

結束

誰在跟你玩真正的怎麼排

了解我意思嗎

沒有人要跟你玩

我要怎麼排

就是我先找solution

才是重點

所以我剛才講的是說

你教這個小孩

最終的目的是

反正他亂排

到時候還是要調來調去

我跟你講

是寫個架構難

還是寫

就是你全方面就出來

連文件也出來

連規劃也出來

只是位置差而已

差在這裡而已

位置就留他自由編排

也可以

位置由AI自由編排

有什麼錯

沒有錯

反正我只要能做完

匯款畫面就好了

你管我怎麼編排

到時候使用者不爽再改

所以我們慢慢就會改變

我們自己的現況

我們要怎麼去玩這種東西

最後的時候你就說

我就絕對不是那個排版主

我們現在這個team裡面

常常用到的函數

我都清楚

我的價值是清楚這些

我就不是清楚

我在那邊調來調去

然後對準來對準去

然後input完之後

還要做validation

那個在嘴巴上面講的時候

他就會說

這個地方是要做減和的

那個規格上面

就已經寫得很清楚了

ID要減和要怎麼樣

這個都已經寫了

那你有token函數

可以去呼叫或怎麼樣

那規格也都寫到那邊

你只要確認他講的對

因為那些都對到

你的文件上面去

所以他用faceID去對

或是怎樣

那個都已經寫在規格上面

你還需要擔心什麼

程式就自然會寫出來

就會這樣

但是那些程式

我剛才講的

因為你們隊友可能成功

是因為你們都是自行科的

如果不是的話

IBM的我都做得出來

但是IBM是一家公司

他所有的文件是清楚的

這樣知道我意思嗎

他要賣產品

他的文件清不清楚

清楚

所以他的指令集

一拿到我手上的時候

就等於叫做破解

整個

我就是junior工程師

我看這個就會寫程式

意思就是這個

一樣嘛

你們就比照

你們是一家產品公司

你怎麼去弄

所以你把那些功能

什麼都刻出來

大概就結束了

再來AI要寫程式就容易多

這個是給你們一個想法

所以你們說KM

你們怎麼建

你們如果永遠都是說

我這個匯款畫面

要參考這一支程式

或怎樣

那樣的KM不完整的

與其製造KM

還不如寫一個

自動AI寫程式

為什麼

因為表示你的

那個知識庫的

那個價值點非常高

不然就會變成

只是說我只是參考範例而已

參考範例是不能用的

因為還是要靠人去改

好 OK

好 感覺這句話我們不用講

那我繼續

不好意思

你每次講的時候

我都講很多

但是你真的有聽話

就真的去改善它

好 我們下一頁

講一下我們這次

新方式的優勢在哪邊

主要就是說

我們可以一次

繼續去補貨所有的

像知識庫裡面的Zendure

然後自動化流程的

就是會更加有

自動化流程的概念

然後同時我們也支援

多功能的清單

那有程式控制的方式

它會讓輸出比較穩定

我們是用寫程式的方式

那效率的部分

我們這次減少了手動操作

那時間的話也減短

那我們這次

因為是由程式來去控制

它整體的腳本流程

所以我們可以做那個

比較標準化的測試準備

那同時

用程式去開發

它有迭代性

它可以不停不停的

做迭代優化

那講一下我們AI

在這一個腳本裡面的角色是什麼

主要流程是說

一開始先SML的輸入

然後AI的分析

我們用到的是Cloudio的AI

然後最後是輸出

那AI的話,它其實主要的工作就是做分析SML的介面的元素

因為我們有很多功能頁面嘛

那功能頁面有一些中文字跟ID還有Stack

它會去拆解頁面的這些元素

把它翻譯成英文跟中文的檔案跟名稱

然後它有辦法去生成這三個我們需要的設置檔案

那實際的方式也是透過API

然後加上提示詞

然後讓AI去分析這個SML輸出我們要的檔案及內容

那主要有這五個方法

那上面的這兩個方法就是

舉例來講的話,我們需要輸出頁面的英文名稱

比方說我們的首頁

首頁這個SML它其實

我們給它只是一個SML

它要怎麼看別的數字是SML呢?

是首頁呢?

它會把它翻譯成Homepage

因為我們的檔案名稱,我們產生出來的程式檔案

必須要去英文的,不然會很奇怪

所以它就會產生Homepage

然後點PY,PY是那個Python檔

然後第二個部分是語音化的中文名稱

譬如說我們這個頁面是我在首頁

那這個首頁的話,也是AI幫我們翻的

然後再來是這三個檔案,就是feature跟step

還有page

這三個檔案是我們的

自動化專案裡面必須要的檔案的部分

那這個的話就是我們的測試案例

這是我們的步驟的流程

然後page是我們各個頁面的定位以及操作代碼

那這些的話,就是AI會幫我們生成

你現在這些Tag

生成的Generate這些Tag

是否opinion用的,還是你自己內部標準化的

opinion用的

所以opinion要這幾個元素

2、4、5

opinion需要這五個元素

這是它的input

它的output

它的input

所以你要生成它的input的元素給它

對對對

這是我方法

我們這邊會多加一些提示詞在上面

然後它會根據這個提示詞做生成

然後講出來是這五個

就是我們這五個function

是call AI的API

了解了解了解

就是你用提示詞去要求它做這些

然後再把它吐出來的東西

生成.py.feature.step.py.py

所以這是你等它的output出來之後

再把它生成成opinion的input的檔案

它的要件

然後到時候就可以自動了

這是我們目前想要的方式

所以一定要透過API

就是攔截它的輸出

再把它變成別人的輸入

然後比較一下新方式跟舊方式

那左邊的話是新

各位你們應該聽得懂

剛才那個就是用API

去呼叫大語言模型

那個API裡面丟的就是提示詞

你幫我產生什麼什麼東西

然後這時候json格式或是python格式

它應該是

你叫它寫python

它就寫python

叫它產生html

這時候output2出來的時候

API收到他們return回來的character

趕快get完之後

給它寫檔

然後這程式都是你在控制的

沒錯

所以你就會等於是

寫一隻程式在控制API

跟寫出檔案

然後存到哪一個資料夾下面

再來就看你高不高興

直接叫opinion起來

比較一下這兩個方式的差異

然後

SNL獲取的話

舊方式是手動

新方式是自動

然後檔案生成的話

舊方式是AI對話

然後新方式是比較

自動化的部分

那時間成本上面呢

新方式的話

比較低

能夠操作的部分

新方式的話

它只需要操作一開始那個

app的應用

app的程式

那一次性的話呢

就比較高

必要處理的部分

新方式的話

它支援檔案讀取多功能

那技術要求的部分

新方式的話

就是基本的拍攝跟腳本設置

那

總結的話

新方式的話

它會降低技術的複雜度

跟人工的干預的部分

然後而且它大幅提升

工作效率

它提升了就是整體的輸出的

可靠性

不用再一直下提示詞

講一樣的話

然後不同的人講還會產生不一樣的後果

對 它可能會有

會有差異 而且你這次問跟下一次問

可能會 結果會有點

因為品質不一啦

因為每個人問法不一樣

就產生不一樣的output

對 它如果把這個提示詞

寫在程式裡面

不會因為不同的人去問

而產生不一樣的結果

因為它不需要了解提示詞

講一下API訂閱

這個我知道

你一定是冷凍

自己花錢下去的

右邊這個是我的截圖

我目前已經

用了七塊錢美金

橘色是已使用的

我已經用了11.84美金

總共是25塊美金

我用掉

接近一半

用完再跟我講就好

反正這個是你自己加值的

你玩完的時候再跟我講

玩完的時候就不要再加值了

你只要跟我講就好

因為總是會用完的一天

但是開發階段

不會花太多錢

都是在試那個

試那個感覺

因為這個的話你不可能

幾次就成功

你必須要提示詞

提示詞的部分

你現在API又是另外一組錢

對啊

不一樣

一個是checkbox

那個是繪畫

那個是20塊美金

那個已經付了

你現在又另外一組錢

所以你這個不要再訂閱了

趕快取消

到時候再跟我講

所以我們這個要

繼續走下去嗎

可以啊

我讓你們玩沒有問題

即使是沒有用在工作上

我都無所謂

我的意思是說

你們只要提案單顧到零

然後呢

基本上大家把那個研發的手段

做出來

把API優化的優化掉就好

公司沒有風險

這才是重點

那至於要玩的東西本來就

我就講這有沒有KPI

沒有

但是我跟你講

應該是要帶動整個

大家要互相學習的機遇

而不是說我就講

像我剛才講的RAG你們也沒碰過

沒碰過的東西還是很多

但是我就講

這個如果繼續玩下去的話

那個玩了之後

再來的問題是什麼

再來的問題是說

你這個業界要跑P的時候

你自己寫一隻程式

你可能也懶得寫

叫AI寫一個程式

可以把Opinion跑完的結果

然後把那個Log展現出來

明天來收拾產區

看是測試成功還是失敗

你應該做整套的

整套完之後

你就等於還是跟工作結合

以後就越來越機車

什麼叫越來越機車

我產生的文件就是要附上

CICD用的

那你就結束了

誰說跟工作無關

當然有關啊

你結合完之後就結果了

結果完之後

是不是運用在工作上

以後你就可以大方的講說

CICD拍誰

是動畫測試連報告上去

你最後會產生一個

你們看得過去的報告

集合比較不會說話的報告

你的目標就成功了

所以

不用定那個Option

但是那個過程

就是一個逐步的過程

那個過程

是要追求到

還是跟工作結合

對嘛

這樣子就OK啦

所以你不會白做工的

所以你不會白做工的

為什麼 因為我們都會有

都有測試要看測試報告

然後才能上網

所以你這一塊就做到底

你最後的產生

你叫API開始呼叫產生報告

產生HTML存成檔案

然後放在某個資料夾

對不對

對你來講就是

把它打通而已

打通就結束了

那以後你們

有的工作這一塊

就可以一律用這個方式

上班

那這就是叫做百分之百結合

就事情不會做一半

而且另外一個

更自私的角度去看

你要開新創公司的話

你可以拿這個去造謠撞騙

就是這個意思

就是要做就給它做到

完

那至少就是一個作品

做那種半套的

我不喜歡做半套

所以我剛才講的

你們本來機會很多

只是看你們要不要玩而已

我跟你講

EVEN是我以後做的東西

絕對是這樣子

我說我要做一個匯款的畫面

匯款的交易

我只是想增加一個MEMO的欄位

我就這樣子就完了

然後基本上開始開規格

就是這樣子啊

你說你話講得這麼粗

當然就是靠我的提示工程

不然我要靠什麼

我講得那麼粗並不代表

我要講得很清楚才能做事情

但是事實上提示工程

那個玉環知道的

真正提示工程就是你講得很粗

我都可以理解

但事實上那個是

你知道那個建築在多少的KM上面

他才有辦法想像你在講什麼事情

就是你隨便

你在大圓模型隨便講說

我要做一個客戶的那個交易畫面

靠夭你是什麼系統他也不知道

他看得懂才有鬼

但是你前面跟他講說

行動銀行的APP IOS

如果加這幾個提示詞

效果就不一樣了

那我就問你

所以我們要對付的是什麼

對付是一般人類

事情講一半弄不清楚

然後前提也都弄不清楚

參數也講不清楚

我專門對付這種人類

那就是我們講的

人類就是這樣子

但是以後我還是對付這樣的人類

因為我本來交代一件事情

還要從頭講到尾

我跟你講喔 一定是iOS的喔

然後你不能用什麼喔

你還記得CICT喔

靠夭 我講了一堆

你懂我意思嗎?

交代一份工作

如果真的嚴謹

就是要像我這樣子講啦

可是哪個員工受得了

我等交代完的時候

你跟我講一大堆

真正AI的世界不一樣

AI的世界是

我該講的只想在前面

最後我只要一個

交易轉帳畫面

他竟然聽得懂我在幹嘛

對不起

是前面我跟他講了一堆

那一堆你沒有看到

就像你現在這個ABI

你最後的時候

你那個畫面有20個

人類知道嗎?

你包括現在所有的員工都不知道

這樣知道我意思嗎?

我行動管理裡面

到底有多少畫面

我都已經

那個叫做訓練好

所以很多人

站在巨人的肩膀上不知道

被訓練好的模型

當作是AI

那是天大的笑話

這個我也會

你真的會嗎?

再想一想

你真的會嗎?

這樣知道我意思嗎?

就像一樣測試模型

你可能最後講幾句話

就OK了

他就測出來

這麼簡單

他就弄出來

那是你在努力的

盡量簡化人類的工作

所以你做了很多努力

這時候沒有人知道你的努力

原來你前面有跟他講說

我是要設計iOS的時候

如果沒有講的時候

Default是什麼

你懂我意思嗎?

你已經跟寫程式一樣

講了一堆東西在前面

所以當人類很懶惰的進來的時候

就沒有有事

不會有事

所以這就是AI的工程

跟寫程式很像

就是專門對付懶人

那以後的人都是這樣子

因為我們接觸的

那個黑盒子

那就是黑盒子

我們講的KM就是黑盒子

所以你看現在員工進來

要學一大堆東西很累

但是如果那些東西是在這裡

只是差你要去拿去搬

老實講那不是黑盒子

那只是你要學習

就是你可以想像有一種人

那種人就是過目不忘

那如果我是這樣的人

我來跟你們學你們的行動網語

或怎麼樣

你知道那是什麼世界

你跟我講過一次的東西

我都知道

我怎麼有可能還來問你

我怎麼有可能還來問你說

Selenium怎麼用

Opinion怎麼用

你的畫面有20個還是50個

我連這種問題我都不問

因為都在我過目不忘的裡面

所以你就會遇到一個員工超級厲害

就是過目不忘

那過目不忘是什麼意思

幫我設計一個畫面

他話就是講一半

事實上他知識度這麼多

就像我們現在做了20年的IT員工一樣

他的知識庫就在那裡

所以知識庫是什麼

知識庫就是專門對付懶人

那你們現在建的AI知識庫是什麼

如果沒有辦法寫到自動寫程式

這個知識庫還是不夠完整

因為你們是自己開發的程式

所以你們可以做到這樣子

那如果是open的我就真的不敢講

就是那一萬行的事情

不要讓我發生在我真實世界裡面就對了

那個對我來講是最沒有意義的事情

20行的程式寫到一萬行

那對我來講是沒有意義的事情

那是不會寫程式的員工寫出來的

扭曲社會真相就是那個東西

因為你會說很複雜

原來是這樣子複雜

所以真實的世界都不複雜

所以我就跟你講

真實的世界是

我的客戶在用了

然後用了那一萬行的程式

你多有魄力

所以我就講就是說

研發歸研發

真實的世界歸真實的世界

但是這個是大家要知道

那個拿捏點是什麼

還有另外一個知識的追求點在哪裡

是三塊

那講一下為什麼會消耗這些token

主要是我們處理大量的頁面資訊

會消耗比較多的token

然後有沒有想說要怎麼樣去

節省

節省這些token的消耗量

不錯啊不錯啊

這都是人就是長大的必經過程

或許會做一些優化跟測試這樣子

光是要減少token

這個就是一個大工程

因為你減少過頭了就不準

廢話太多就是吃太多token

所以那個真的想提示工程這件事情

你看我現在做的東西

一天給大家用的時候

一天就燒掉三十塊美金

一天就三十塊美金

而且這個還不是重度使用

現在還輕量使用

以後一天可能五十塊美金

所以很恐怖

但是五十塊美金可以取代多少

那個人腦燒到死的問題

這就是問題

其實那五十塊美金是非常值得的

就是假設我現在講一句話

城市就寫住

那個價值連城

本來就價值連城

所以錢債我看起來是四小

主要是你們在追求這個過程當中

所以又說會玩AI跟不會玩AI

最後最大的程度的差別就在於

連這種細節都開始減少token

我很高興聽到這樣的結果

代表怎樣

就已經開始在研究

因為這個是燒你自己的錢有感

如果燒公司的錢

那就燒吧

人類就是這麼賤

你現在燒公司的錢

就說能用就好了

我幹嘛去節省

我幹嘛去節省token

一定是這樣子

燒自己的錢我要省token

我跟你講

你這個程度

想到這個燒公司的錢就不用節省

這個很好

那我就跟你講

真實的世界是這樣子

真實的世界是你的project太大

然後你已經盡量節省token了

你的提示工程已經佔掉快

快六萬個token到七萬個token

你已經

你知道因為你要對付的情境非常複雜

所以你已經要瘦身也沒辦法瘦身

已經壓縮在壓縮

壓縮在壓縮了

你知道為什麼要壓縮

因為總共有二十萬的token

你要留十四萬給後面的人對話用

你前面提示工程就給他佔了

佔了120k

就是我講的

KM直接丟進去就滿了

你後面再問什麼東西都不會回答你

就直接跟你講out of memory

所以AI不會用的人

永遠都活在out of memory當中

就是這個問題

所以要節省token那件事情

講穿了

當AI工程師有沒有這個概念

這才是重點

也就是說你的世界不是不用錢的

是要錢的

然後你的腦做得出來

聰明不聰明

決定到

你如果不好用

縱使你這邊已經吃了這麼滿

問的問題就一下就跟你講說

Session closed

你沒有辦法處理事情

所以以前我

我像我那個寫那個MVC架構的

那個Open的那個

大概寫一個系統

大概一天

大概下一步下一步下一步

按大概跟他互動的二十個對話

就整天的token就燒光了

那已經都很複雜的情形

你燒公司的錢就是

API是沒有好倒

沒有就是他就一直燒

但是一來的時候就滿了

例如說先前我們不是有一個

直接丟八百個欄位的東西

要下去分析

八百一下去GG

就直接GG了

才一個table八百個欄位

你要分析個鳥

就滿了

有的人就是習慣不好

程式都可以一萬支

table八百個欄位

應該也不覺得奇怪

就是你規劃一個table

有八百個欄位

你可以想像這世界上

什麼奇門遁甲都有

所以你AI要分析的時候

分析到這種爛東西的時候

你怎麼分析

大概分享一下說

對AI工程師

其實你說未來真正要亮點

要亮點什麼東西

都懂得這些

也知道問題

還有未來要怎麼運用

這才是AI工程師要走的

你的路還有

但我只是隨時都可以

跟你提點一些

那其他的人都

因為我看都是你在做

其他的同仁應該理論上

也可以慢慢去接觸才對

那只是跟你們一起分享

這些事情都是必經之路

燒自己的錢才會有痛

才會去想這個問題

然後魂本很大的時候

才會去想要怎麼切割

所以切身之痛

才會引發真正的成長

我講的是真的

如果你今天所有東西都不用錢

你可能效果還沒那麼好

你就不會長進

就講白一點就這樣

你能長進的程度有限

最後做個結論

本次團隊有用新腳本

取代之前手動下載跟AI對話

整合成自動化流程

大概減少了70%的時間

同時提升輸出的穩定性

你後面把它整成CICD

就是一鍵合成的這種做法

是最好的

但是必要的人類手段是沒關係

我的意思是盡量就整

年初那個報告可以直接夾檔

直接可以夾檔

做到稽核程度可以過關為止

這一塊你們在整完之後

就可以說我有測20個畫面

你不要找我麻煩

我真的有測

你懂我意思嗎

然後最後還會有一個測試報告

會有summarize

講一些廢話

那這樣子就結束

就是它正向案例反向案例

什麼什麼什麼

例如說你要貼圖或幹嘛

我的意思是指說

你要去把它當作報告呈現

CICD就結束了

而不是過跟不過而已

可能還要有一些wording來對證

這個是給你們一些想法

就是說要對付自動化

以後大家在寫程式的時候

你就要附上報告

那遇到刁鑽的稽核

就會說你測試不完整

或是報告很粗

類似這樣子

它有可能不只是不想讓你貼畫面

它甚至還要你要寫一些文字

這一塊你們可以再精進

好不好

可以啊

沒有問題啊

燒完的時候再跟我講

會記錄下來

等一下會產生對應的檔案在上面

然後右邊的話是指令

Commit指令的部分

等一下會跟大家看一下

先

第一步先

我要先執行那個

腳本的指令

然後會開啟APP

開啟APP

然後在操作流程中

它會把那個

SNL儲存下來

像右側這邊的話

存到這個資料夾上面

然後我點選投資指索頁的部分

它也會把它存下來

這時候我就是結束這個

補貨頁面SNL的步驟

然後可以看到左邊的話

API正在處理這個流程

它做了一些

英文名稱的翻譯

中文名稱的翻譯

並且處理相關的檔案

這個處理過程中

它正在處理這個SNL

做分析

同時API也有給予相關的回應

然後它現在開始生成

生成那個檔案

可以看到這邊的話

它已經生成一個

Visual檔案

那剛才講的那四個

對那四個會有四個檔案

State、Page跟V群

那這邊的話它就會自動生成

那可以看到這邊的話

就是它這邊

它Opinion會畫已經自動關閉

代表說這段流程已經結束了

然後我們可以看到

左邊這個資料夾的話

已經有塞進來

塞到指定資料夾下面

然後就可以Run Opinion

目前是先開那個

給大家看一下那個

那個檔案的部分

資料夾檔案的部分

那這邊的話就是

剛剛講到

它是一個語音化的流程的部分

它從登錄頁做到投資總欄

然後接下來這邊是

Step就是它的流程的相關的定義

然後上面的中文跟英文

就是AI協助做翻譯的動作

所以你那個是

補貨的部分是

前面是在操作的時候

是想說要驗這個功能的意思

然後再來它要怎麼去登打

或是按

就由它開始自己生成

所以是不會說笨笨的

從頭操作一次給它看

不用

它會變成是依照你的功能

把你整串葡萄樹抓出來

整串的可能涉及到的頁面

或是XML

它再去做處理或輸入

是不是這樣子嗎

剛剛流程是從登錄

做到投資的頁面

這個是一個操作流程

把它的XML串下來

所以像剛剛講的

應該是說一個箱子裡面

有多個XML

AI去分析這些XML

然後把它串成一個流程

其實這是可以的

所以這個應該是說

懶人的做法是

擺功能去測

對

那葡萄樹樹狀結構

要能撈出來

所以現在如果再深層一點的話

就做這一層

就做這個部分

也就是說

我只選擇我要測的功能

比如說我可能跟他說

我想要測

匯款

給他

他自己去把他的樹狀結構長出來

這個目前你還沒做

對

OK

然後答案是這樣子

很好很好

至少我可以跟你對話

對不對

就是找不到對話的對象

也是很痛苦

我們會一起溝通

沒有

我說實在的

有些東西你不懂

你要對話也很難

因為你可以難以想像的人

就問不出你那個感覺

對啊

我剛才就知道你的問題是在哪邊

我不要講說是問題

就是說

我想像要的功能是什麼

跟我的落差是有的

因為你時間有限

你也不可能做到我剛才講的那樣

但是光是我剛才講的那個東西

就要花很多時間

這樣知道我意思嗎

就是說

我們在工程的背後

要做到完整這件事情

本來就是精益求精

那表面性的東西蛋完之後

有沒有人可以看到深層的東西

這是大家要學習的

做任何的服務

都是站在

站在人類的思考去看

所以當你只帶我一層的時候

我就可以發現

這可能還不夠

不是我貪心喔

我就以工程師的角度

這樣子才叫做完整

所以就會想到什麼叫做完整

所以

能探索出問題

代表有用心在聽

跟怎樣

有融入你的架構

那

這個就是我希望

大家員工本身

在討論的過程當中

就可以互相學習

不會說

就這樣子很棒了

已經完了

我跟你講

那個就是怎樣

沒有用心

因為他的

他的東西就是指說

我做個表面就OK了

我跟執行長交代

我們研究就這樣子

就結束了

事實上

我覺得整個研究

我自己最清楚

要再往第二層再深層

又是另外一個挑戰

每個東西都要花時間

但花完時間

是不是值得

是值得

為什麼

因為你知道這種東西

我就講要做就做到底

不會只做一半的

我要自動寫程式

就自動寫程式

沒有做一半的

你懂我意思嗎

沒有做一半的

就是

我現在會寫SQL了

然後就說

我現在已經用AI寫SQL

我跟你講

通常那個都是

還半筒而已

只是摸個邊而已

跟那個

完成品

所以我就跟你講

要立下比較大的志願

開新創

這樣才對嘛

因為每一次都是

心眼一點點的

然後就是小確幸就結束了

我跟你講

這樣子成長的量能就不好

成長的量能就小

我要開新創

我要開公司

就這樣子想

哪怕

這東西人家都有了

I don't care

那至少我是一個完整的

這個是給你們鼓勵的

所以你甚至要有資料庫

還有Dashboard

還有MIS

你懂我意思嗎

你到最後越長越多

為什麼

你就覺得你是在做一套產品

你不是在做一個

詩意圖說

我會了

我告訴全世界

我會了

我跟你講

要做就要做完

不要去做那種

每個人

例如說我招搖撞騙

我也說

我有寫自動化程式

當你去講這句話的時候

你的圖拿來看一下

只做到這樣子

跟做到完整的

不一樣

所以

各位要思考的是說

我加職在這裡的時候

未來能不能帶給我職場的任何好處

要這樣子去想

對公司又好

對未來又好

所以有時候

知識的累積跟資產的累積

是要靠自己去經營

這種東西就不能老是用意向性的

這個沒問題啦

這個我都知道

我跟你講

有時候員工是這樣子

有時候我最擔心的員工是這樣子

在你講的時候

這個我知道

這個我知道

真的很想說

你知道怎麼講就好

你知道我意思嗎

你

給予表現是一回事

但是有時候就會變成說

你很虛

就是東西沒有到完整

現在沒有批評你的東西不完整

我是只是說

你們就是要深耕

所以我剛才講就是說

要玩就要玩

玩的比較

到

到比較

那個點

那你就會覺得說

這個中間都沒有白揮

你會覺得很開心

到最後都是你的

絕對都是你們研究出來的

沒有問題

可是你只是摸皮的話

你會遇到很多競爭對手

跟你一模一樣

都招搖斷片

講一下就說

我會自動化測試

我跟你講

很HIGH

很HIGH

就是沒有遇到真正的

連interview官都可能是

是農包

那我一直講這件事情是說

這個就是我在找工作的時候

要讓人家知道

你一個鑽石的時候

是多大的重點

那我會講這件事情是說

我站在一個年輕人

在學東西的時候

我無非經營我未來

對不對

我經營我未來的知識的成長

的深度跟廣度

所以你看我講的很多

都是深度跟廣度

還有你們人生會遇到的一些

職場上的一些

不管是霸凌或是怎樣

那會遇到講這些東西的時候

都是站在一個交流的立場去看

那我覺得

緣分不會是只有這樣子而已

所以我一直強調說

你們現在做的東西

要繼續玩

這個很重要

那另外一個是要玩深一點

不要摸個邊就結束了

老實講這個會議只是一個意象而已

說實在的

對我來看

還沒有跟公司整合

那你整合完之後

基本上就是一個火力展示

就是一個火力展示

只是說

我要搭上一個真正完整的邊

我覺得這很重要

所以even是KM

我們KM的目的是Q&A呢

還是自動寫程式

如果Q&A

我們是傳統的KM

可是站在

我們全部都in-house開發的時候

我一個員工最需要的是

快速寫程式

可以理解的東西

對嗎

我先不要講行政工作

如果我要了解這個系統

我要怎麼裝台 怎麼寫

電尾怎麼發 UI怎麼刻

那些功能

我沒有看到全部

甚至一下就寫出來

這個才是有成就感的嘛

那如果說黃我強怎麼申請

或是怎樣 那些東西都是行政

所以兩塊

拆開來看是這兩塊

所以我反而

你看一看到整個科技的應用的時候

我會科技到處說

你所有的東西你們現在是如何

快速寫成式的

那OK 現在有一個最資深的員工

站出來說 你貢獻多少文件

你現在對這個系統

貢獻多少文件

你寫了很多文件 可是你沒有貢獻文件

這樣知道我意思嗎

那

這個地方就會凸顯一件事情

所以後面來的人

學應該也沒學那麼快

會學得比較慢

因為他

沒有看到全貌

他只看到sample code

所以

有時候會有這樣的落差

那以前我們在做任何事情的時候

我會怎麼做

我就會覺得說

天下的事情

都大同小異

所以我學code的方式也大同小異

才對 不應該有

這麼大的門檻

就是因為人類創造了門檻

學習的門檻

所以文件不好

我科的文件

就是我生產力很高

我當時科了一顆元件

我沒有寫太好的文件

這件事情

在我認知的是

KM在這一塊

要把它反主義出來

就是用AI再去寫文件出來

這件事情是很重要的

所以

我在講的是

包括DB schema都畫得很爛

這個東西都是一模一樣的問題

沒有叫你重畫

沒有要叫你重畫

現在要用AI去

gen documentation

這一件事情

有沒有人做

我

沒有啦

這個是我現在做的嘛

那我覺得

這是我現在做的嘛

那我的意思是說

他們現在有很多這種空間嘛

所以你KM要真正趕快快速

讓員工知道

而且我認為這個技能現在就要學

為什麼

因為我可以給各位一個想像

未來

一家鳥公司進去

然後什麼文件都沒有

然後

嫌你學得太慢的話怎麼辦

這樣知道我的意思嗎

你就想像那個情境

我現在剛進去

然後就好像人家

對我期待值很高

然後我要馬上可以output

那我問你

沒有文件的公司

訓練都沒有

什麼都沒有

我要怎麼學

所以我現在用

現在所有的東西都是

只有一堆鳥source code

你們可以練功啊

你們要怎麼去後補

這些文件啊

我就講你後面的日子

可以練功這一塊

為什麼

縱使這文件我們未來不是留存的系統

我只能跟你講

由新人進來

你有辦法做出AI的文件

了解哪個功能在做什麼

都不要有人教哦

先做到這樣子

我給你的情境都是很嚴的

你的情境新來的

然後一大堆鳥source code

沒有留存圖

然後我就開始一步一腳印

我應該要怎麼去

反向工程去把它弄出來

做出來再跟我講

因為只有這種情境

才可以鍛鍊

你們訓練用AI的實力

不然都過得太爽了

有人分享啊

因為有一種情境就是沒有人教

就是很不要臉

就直接丟一堆source code給你

要用這種情境啊

啊你不是很厲害

大家都真的是慢慢看

看一年看兩年看三年

這樣對嗎

這個情境做得到

大概你們就得到

得到

這是我的真傳

我就是專門做這種事情

就是逆向工程

不要靠別人

什麼都要靠別人問題很多

所以要怎麼靠自己

這一塊你們可以思考一下

那我現在看你們

KM怎麼分享

只是我跟你講就是說

我的終極的game是這樣子

那大家現在

我已經請那個金控那邊

說那個4K那個太離譜了

那個token也很離譜

然後用的都有幻覺,問的也不會準

這件事情我跟他們講說

你開到最大

現在4K而已

那個API只有4K

你覺得會贏嗎

夠遠

這個是用達哥的是不是

對啊

這個要精彩也很困難

你了解我意思嗎

不是要潑你們冷水

因為那個腦糞

腦容量只有4K

跟你現在Crossy的是200K

要怎麼比

你連吃的那個文件

的容量都那麼小

所以他大概幻覺一堆

應該是幻覺一堆吧

問A答B的一堆

要看你的資料

怎麼去做彙整

你的資料彙整的好的話

你有辦法可以去減少他的幻覺回答

然後你的提示詞

可能也需要做一些搭配

但是就是還是

因為腦容量很小

但的確他裡面有的模型

都是比較outdated

就是比較舊的EO

那現在就是O1以外

我叫他們4K放大

可是他上面給你的

雖然說是O1

可能是2023年

那這個部分我已經要求

他改成Cloudy

Cloudy我看好像有加進來

但是他訓練資料

好像是到2023年

我知道啦

那個API那把Key

那把Key他也只能接2023年的

3.5版的

那就3.5版

基本上還是掛3.7

但是你問他你是誰的時候

他就露餡

所以就是

我們現在的KM

就還是以那個維運類的面向

下去去做規劃

就還沒辦法達到那個執行長想要的

可以幫你寫程式

沒關係沒關係

這個本來就有兩條路

我就講嘛

兩條路一個是行政的

或是初步的知識取得

另外一塊就是比較進階的

因為你既然有Library

有這些全部都自己建的

理論上就可以直接從那邊

直接自動寫程式才對

那這一塊呢

未來假設還有那麼多時間的話

我建議就是說

我們診病我就講

組長就陪我玩

他們在日子裡面沒有診病

因為我要給各位滿滿的愛

就是這個

那你以後只要支持

轉程式的時候快一點就好了

用速度來感謝我就好了

然後我跟毓桓就辛苦一點

趕快把這些東西弄好

你們呢

你們的工作就是把我剛才講的那些再實現

意思是怎樣

你們讓你們自己長大

就等於對我最大的回報

就是這樣子

另外一個是公司的那個

提案的部分

一定是要盡量消滅

這樣子就好了

那你工作上就除了R&D

and R&D that's all

就是這樣子不斷的研究發展

那這個才是我們要的

認真的一個目的

而且我可以保證你們未來找不到

這樣子的一個工作場景

因為未來就是我剛才講的那種dirty job

就會很多

所以要趕快把這個時候

利用這個時候來drive一個小弟

然後怎麼去使用

這個很重要

那因為之前資訊長的分享

是有提到就是說

希望我們頻道可以盡量要有一個方法出來

那所以在

資料的這個彙整上面

我們大概就是

從維運類的角度下去

會區分這五大類的項目

首先是會先去彙整SaaS上面的一些

主機資訊

系統資訊等等的資料

然後會把它彙整成一份

markdown文件

那再來是防火牆的部分

我們會去把開port的這個

來源跟目的端都去做一個彙整

那透過這樣子

這份資料我們就可以

利用這份資料來幫我們去彙整

你防火牆上面的這些方向性

都可以很清楚的把它列出來

然後再來是一些

我應用系統下面有哪一些批次

有哪一些批次的作業

然後這個批次呢

它有哪一些上下有關聯系統的資料

那這些資訊

我們可以把它彙整起來是一份檔案

那再來是資料庫的部分

那我們可以把

DB schema

然後還有或者是過往大家資料的一些SQL資訊

我們可以把它彙整成一份

那最後是維運QA類的

那比方說是一些什麼

維運上面的

處理一些問題的SOP啊

或者是過往的一些客戶的紀錄

那我們也可以把一些

經驗問題的東西彙整在這一份裡面

那會把它

這些文件切開

其實它會有一個好處啦

就是你不要讓你彙整的文件

全部都打在一份裡面

因為你REG下去的時候

它可能會抓到非常大串

但是是沒有用的資料出來

都一直有噴上去

那我們把它切開的話

它在做REG的時候

它會是每個檔案下去做搜尋

所以它們的概念是一樣的

我們在做這種分流的

就是說我有五顆腦

跟一顆腦是不一樣的

那你當一來就分流的時候

基本上就讓它方向變小

所以這種做法是

你到時候還可以切割

二維度

那二維度就是你REG的時候

你會更精準

找到直接二維度的地方

那二維度的刻度要自己去切

那

所以我就講Networking的概念

就是這樣

二維度的東西就是讓你

當你資料量其實越來越多

你知識一言難盡的時候

你就必須再刻二維度

你現在所以叫做第一層

那未來會有第二層

那再分類

然後到時候再把文本

直接就歸到該有的地方去

也就是說

例如說這樣子好了

那你可能一個維度叫做

ER Diagram

另外一個就是Table Name

Table List Usage

再來就是Table Detail

再來就是

就是

Real SQL

Implement Statement

那這樣五個刻度的時候

基本上就可以透過這五個刻度

這五個小分類

你懂我意思嗎

如果你有要求要去撈過往的SQL的時候

基本上就不會用到這個

那就會前面就走完就結束了

問KM就到前面就結束了

你今天如果說要過往的一些經驗

他就會把前面那個玩了之後再去連結這個

所以相對的你的Rig就會發揮作用

所以我跟你講那個就是刻度的規劃

文件的規劃跟刻度的規劃

就好像我們在設檔案資料夾很像

那個過程是一個概念

這個只是讓你們知道一下

這樣子切是對的

跟放在一個裡面根本是垃圾沒有用

就是全面好像所有的資訊都散的

AI再怎麼聰明那就是一些

我說實在的大量資料在倒K

沒有人這樣來做

就是把公司的所有的文件就給他丟進去

然後就一個一個上傳

這樣的一個等於在污辱AI

那我先前看到很多員工就是老實講就是說

我看到你們這樣做就有方法論

這個有聽進去我都很開心

但是現在就會看到有一些沒有用心思考的

那我說沒有用心思考

你謊論說要玩AI那是一個笑話的事情

這是你陰患生不出來

這個是重點

就是說你要有一些方法論

那些方法論自己都能說服的了

那就會成功

如果連自己都是很不負責任

就說像以前都很喜歡就把文件直接丟進去

那個是真的最傳統的

我以前也是

我只有當過這樣的人當不告一個禮拜

我就說我以後不要這樣子

因為我只有最沒有耐性的時候

我認為AI可以吃得了這個檔案

我才去這樣子做

但是呢

真正要做工程的時候

沒有人這樣子做

這個

這樣子做是對的

那只是說根據複雜度

跟你未納進去的那個金輪度

可以再分二維度

類似這樣的概念

就像問Q&A

一個是系統問題

一個是業務中斷的問題

或是一個是資料要更正的問題

你就會開始做貼標

那到時候你基本上

你的那個文件就等於有附給他一個tag

那這個tag對你未來在設計RAT

丟到文本裡面在search的時候

他抓出來的像量資料庫的準確度就會高很多

而且二來是針對我的問題做分類

那叫二維的

透過大於原模型

語意先分析完之後

再進行第二次的檢索

那個就會更精準

因為上下文的部分就是說

例如說我要做

可能有人講話就很不負責任

我想要了解什麼什麼東西

就這樣子很清楚

那針對這一句話

可能我要怎麼去搜尋的架構

可能通過大於原模型先翻譯完之後

我再真正丟這個東西

再下去查

那就不一樣的結果

可是你直接用這個

直接裡面去用模糊比對的

那個就大概就死了

因為意思是指說

大於原模型只有假設k數很少的時候

像那個4k的

我就會用這種方式來玩

我先精準知道你這個

這個講話口急的人

事實上言不及義

先確定一下你的話術

後面我再去進行真正的搜尋

所以一來的人就是亂講話

所以我們人類就是這樣子

一來就講不清楚

所以我要先精準

之後再根據精準再去下搜尋

才會正確

那一來以前

像我們現在達哥是直接問完之後

就直接下去了

就是你打的那些字

或是你提供的那些資料

他直接一來就像那樣的話

那直接就去找了

那個找的水準就會差

所以跟你講

那叫二維度的RH

那這個以後你們慢慢學

很多東西是這樣子

你人講不清楚的

一來就去搜尋

就我跟你講講不清楚

弄了老半天來說

這不是我想要的

然後還怪AI不準

就我講了

未經濟的KM就是垃圾了

出來怎麼會準

就剛才有講參數

你的documentation寫那麼差

然後我出來的程式當然是不能用的

那一模一樣的問題

所以一來先要確定

人類你想要幹嘛

這叫做一維度的語意分析

然後完了之後

再進入二維度的向量分析

就是到這裡

所以有時候我講說

我想了解黃某講申請書怎麼填寫

然後這句話

有很多想像空間

那先送去

就說我現在有RAG

所以長得這個樣子

請大語言模型先幫我確定

我怎麼去對標

現在這句話我可能要搜尋的

就是翻譯成一句話

可以讓我後面

像這種東西就是你要去實驗

就是說人類講不清楚的話

透過大語言模型再講得更清楚

然後再透過這一個再去RAG

RAG完之後再去搜尋

因為達哥本身就是RAG

所以你們沒有經過他的背後工程

所以未來如果給你們一個工作

就是說

你們這一科的

幫我建一個向量資料庫

還有RAG系統

我光是這個你規格要怎麼開

你就跟我討論

為什麼

因為你連RAG系統要怎麼建都不知道

這樣知道我意思嗎

所以你們現在是用別人的RAG

所以你根本不知道它是怎麼設計的

那你專屬的RAG是什麼

這很精彩喔

如果是針對醫療的

我可以設計醫療的RAG

針對金融業的

我可以設計金融業的RAG

所以不一樣

但是你這是通用模型

通用模型就是

你講什麼你講什麼

所以如果這一塊你看喔

你看你們的分工是怎麼樣我不知道

那我只能一樣

真的還要玩

我都可以跟你講

你們都可以建那個

建向量資料庫

可以自己怎麼玩怎麼玩

只是跟你講就是說

實驗要付出代價

就像你從

Selenium開始玩

Opinion開始玩

從開始手動玩

然後怎麼建

怎麼install

光是那個就花了一堆時間

然後再來就是要用API

然後又要幹嘛

然後你再去找什麼BERT模型

我跟你講

你們根本學無止盡

可是我跟你講

這就是AI工程師

到最後必經之路

那現在你們還沒有走這一條

是達哥

號稱是達哥

我跟你講

我們現在已經早就有能力建達哥了

只是不願意

不願意

但是我就跟你講

我鼓勵大家重複建達哥也無所謂

因為這個系統根本爛的要死

根本不喜歡

這樣知道我的意思嗎

我根本不喜歡嘛

但是他能不能被取代

先不要把話講那麼講

如果換你來設計

你要怎麼設計

所以你先把

你就會開始說

我怎麼去設計一個RAG系統

你就會開始

有一點點惶恐了

為什麼

因為你根本

他怎麼運作你都不知道

所以你看我現在講的話

你們大概有人懵懵懂懂

是因為你們還沒走到那裡

可是當你開始接觸這個行業的時候

你就會走到這裡

而且你發現那個很難

因為很多東西要想像

所以這個部分是鼓勵你們

繼續往下挖

那你說AI從去年六月開始

去年六月開始玩

玩到現在

那所以

所以其實你們並沒有落後太多

那另外一件事情是說

不要朗朗上口的技術

朗朗上口的技術沒有實作

這個不好

這個部分可以供你們參考

就是說

不要朗朗上口的一大堆AI技術

講到最後自己很虛

就是還是要像你這樣子

一腳步一腳印的走進來

然後自己花錢去搞API

然後去弄完之後

你才會真正得到東西

一樣

像那樣資料庫沒有自己裝起來

然後把模型建起來

然後上傳檔案

然後開始產生那些0101的標準值

你沒有進去之後

那怎麼去搜尋

你怎麼會知道比對出來的效果是什麼

所以當你玩過的時候

你就會知道

原來達哥當時那些王八蛋是這麼一回事

弄得我一大堆幻覺

對嗎

其實被這個平台綁住了

現在用他的那個DSE

對啊

你就被他RIG綁住了

那你根本不知道他幻覺是怎麼來的

然後他的黑盒子是怎麼弄的

所以我就講一件事情

免費的最貴就是這樣子

你本來可以有更好的技術

就被人家綁死

他等於二房東

我直接這樣子講

達哥就是二房東

那個腦跟腦殘一樣只有4K

然後第二個

本來是200K變4K

那個腦殘

那第二件事情

然後還有第一

RIG系統是他的

啊我本來可以自建也沒有了

所以你看所有東西都被綁死

啊你怎麼會用得開心

所以我會學不到東西

而且你會對這個越來越幻想

就覺得說啊這個

然後你們就會負負得正

你會用提示工程

硬去圍堵

其實我跟你講你們做的事情大概是

百分之九十是浪費時間

為什麼

因為你不準是不是就會用提示工程

再去圍堵他

讓他跑到對的地方去

希望能這樣子對不對

那你提示工程就會越加越多

越加越多

事實上他沒那麼笨

他只開4K給你

然後再加上他用的模型是爛的

所以我就跟你講就是說

你在跟錯師父學東西就是這樣的下場

所以隨時可以懸崖勒馬

就是說你們現在有他那個API

理論上自己建checkbox都比那個達哥強太多

意思是什麼

就是說很多東西就是

慢慢的就開始會自建

那自建代表怎樣

你對技術的掌握是越來越強

啊不然就是活在一個懵懵懂懂當中

這一塊大概是這樣子

所以你們可以可以再走不一樣的路

只是說不要嫌麻煩

因為只是說要做的東西就會跟你一樣

省一年的工資安裝那些

你就會搞了一大堆

反正花很多時間就對了

都一樣的問題

但是沒有付出就會有收穫的東西

所以你們只要願意

你們就可以起案子

只是說對我來看

不需要再浪費這種

這個只是讓你們有一點點感覺

那有一點感覺完之後

如果真的不好用的時候

那就踩個煞車

到哪個地方結束

那至少你不用花很多時間在圍堵

那我再看看你後面

這個方法論對

那我就直接調好了

上傳檔案

這邊的話就是我們把

我們彙整出來的Markdown的資料

就把它打成一包

而且這個都是你辛苦整理出來的

Markdown整理出來的

有花感情的對不對

目前這一塊如果有花感情的

跟Cloud比較有感情

所以你整體資料是用 curl

然後反而把這個知識匯到

開發小工具是請靠的開發

就是最近很夯的那個什麼 Vive coding

明天就是跟他對話

然後請他幫你把程式產出來這樣

小工具嘛

對小工具

然後等一下後面會提到

好

OK好

所以反正就是

我們會把 Apartheid 讓你的資料匯成好

匯成好之後

然後去做 DSE 裡面去做上傳

那上傳進來之後

你就可以在 Docker 裡面去建一個 Assistant

把你剛剛上傳上去 DSE 的那個 Part

你選進來

基本上就可以用了

所以 Docker 上面的操作流程

其實是這個樣子

但是

這個我就先跳過好了

因為這個很重要

然後比較重要的是說

我們在做這件事情過程中

其實有幾個核心問題

那最直接會大家各科會所會遇到問題

就是轉檔問題

我要怎麼把這些資料轉成 Markdown 格式

因為你光是跟一個人講 Markdown 格式

他可能就會要花很多時間去看說

到底 Markdown 是什麼東西

對

那所以說最核心的問題是

怎麼讓大家有一個小工具

然後把我的一些文件

可能是我的 PDF 或是 Excel

把它變成一個 Markdown 格式的資訊

那把這些資訊再快速的去做清洗

其實就是去選擇哪一些是有用的資訊

把它變成是留下來當作是你這一份 Markdown 文件

對

它就會是你 KM 的背景

那所以第二層才會是說

我先把資料轉出來

第二層就是我要去選擇哪一些資訊是有用的

是有價值的

其實是目前為止都沒有白學

這個 OK 的

因為我們測試的結果是 Jason 跟 Markdown

他吃進去的後面效果最好

對

可是因為 Markdown 的話

他其實適應性會比 Jason 好很多

就是那個量格就小

所以這邊才會用 Markdown

那最後面你會遇到的問題其實就是打個平台本身的問題

因為他現在 DSE 裡面

他其實上傳的東西

他裡面資源的程度是有限的

然後再來是你上傳到 DSE 上面之後

基本上你每次更新

其實就是要手動把你那些文件重新去

手動更新過一遍

然後再重新打包

然後再重新插進去

所以你寫個小工具變成 Markdown

對

後面會提到

然後就是說這整件事情其實就是

你要人工去做介入

如果你的文件有更新的話

你就要人工去做介入

然後讓這整個流程重新跑一遍

然後他才會去反映到打個平台的上面

那所以說就有一點不是很自動化

當然我們會希望就是說這個文件我有改

然後他可能會有一個自動化的背景

然後他幫我們重新打包上傳

讓這個反映成這樣

這不錯

這想法本來就這樣

當然會希望是這樣

但是我們其實是受限達哥這個平台

他提供的功能

所以他還是會有一些其他的問題

我們會去反映到

繼續

那這邊的話就是提到

就是剛剛講的那個請到的

Web Coding 去寫的一些小工具

那就是小工具的話就是有 Excel

我們把它轉成 Markdown

然後 PDF 轉 Markdown

然後 Word 轉 Markdown

然後還有就是 Email 幫我們轉 Markdown

那 Email 這個話其實就是特別

因為像我們有一些是客訴的問題

那客訴的問題它其實很有價值

因為它代表可能有的系統方面

某些地方的問題是有一個經驗

就是如果你以後再遇到的話

你不會出來查

所以 Email 這個我覺得還滿重要的

那但是因為 Email 的話就是

我先把它點開好了

讓我們確認它裡面的

它這個轉 Markdown

轉 Markdown 的部分

我看一下你有幾個型態

Excel 轉 Markdown

Excel 轉 Markdown 跟 Word 跟 Email

嗯

PDF 轉 Markdown 的部分

效果受增很多

PDF 轉 Markdown 的話就要看

因為 PDF 的話就是它分兩種類型

一個是我們掃描的 PDF

那掃描的 PDF 的話

它要轉 Markdown 的話

它就要透過 OCR 去做

可是 OCR

就是我請 AI 開發過程中

因為 OCR 我們是用 Open Source 的

中文辨識的套件

但是它辨識出來的效果

其實沒有那麼好

它可以去做一定程度的 Markdown

但是它裡面會有一些資訊

你還是需要人工手工去做修正

所以它應用的效果

我覺得沒那麼好

那如果是我們一般從 Word 的那種文件

把它轉成 PDF 這種

它轉出來的 Markdown 效果會是最好的

因為其實它可以直接擷取到

PDF 裡面的這些文字

它就可以有辦法幫你直接擷取

你指的是 PDF 本身裡面

文字已經感覺變圖形了

對

掃描的話它其實就是圖形

所以它要用 OCR 的方式去做抽取

那如果 PDF 本身是文字的那個 Pattern 的話

基本上不會太有大的問題

反而是本身裡面有夾圖

有一點像簡報類似這樣

對 這會是另外一個問題

因為圖片的話就是你在抽取過程中

你會知道這個 object 它是一個圖片

可是這個圖片你要 bypass 它

還是說要把它去做保留

甚至是保留之後

要不要拿去比方說

try 一個它自己圖片的那個動態

然後請它幫你去 describe 這個圖片

就要看你要做到什麼

那你現在這個 PDF 轉 Markdown 的部分

大概就萃取文字的部分

對 我是針對文字的部分

那其他的就 ignore 掉

它也有對一個選項

可以把圖片另存到哪裡去

它那位小工具其實滿有價值的

所以在這個 KM

我們自己討論的過程中

覺得其實最有價值的就是寫小工具

反而會比達哥還多

沒有 寫小工具本來就在做自動化裡面都會用到的

或同步啊 有沒有

有時候要同步啊

這裡生肖就哪邊要跟著生肖啊

PowerShare 這些要搭配使用的等等的

只是說現在你的大概都是針對文字行萃取的

那 Excel 的部分

大概就是用類似像 CSV 這種樣子

Excel 的話

它是用那個

用雙截棍的嗎

不是

我們可以直接上傳整份 Excel 上去讓他去做

Markdown 還是雙截棍啊

Markdown 就是雙截棍啊

你可以 demo 就好

沒有沒有 我大概知道 Markdown 是怎麼一回事

不用

這就是表格啦

其實我們科其實有的沒有用過這些小工具

Markdown 我也一定變 Sen

因為那個長短時間

美人魚跟 Markdown 那個我都是最熟

因為 Cloudy 最常用的

所以我們也是評估 Markdown

還有 SVG

HTML

這大概都是 Cloudy 都能接受

就是先用這個啦

我這邊就有準備一個那個 Email

我們把它匯出來之後

其實我們就可以直接丟到那個小工具裡面

然後小工具裡面其實它先做第一件事情

它就是先把我的 Email 跟 MSG 檔案的文字先提取出來

它先把文字提取出來

然後它會針對你 Email 裡面的一些名字啊

它就直接把你 filter 掉

那我這邊在開發的時候

就是有請 AI 針對一些那個 ID 的 Pattern

還有 Email 的 Pattern

這些資訊就把它過濾掉

不然它在後面第二步去做的時候

它會被我們的 DLP 給攔截住

因為裡面有個資

所以我們資安的 DLP 會偵測到

那你這個資料確許好沒有問題之後

第二步就是我們可以把 Email 的內容

就直接把它送給那個

我這邊一樣是用大哥的 API

我就不是串那個外面的套地

就是大哥的 API

然後我串大哥的 Assistant

然後請它裡面的那個 AI 腦

就幫我們去做這個問題的彙整

那在裡面就是有給它那個 System Form

就請它彙整

等於是優化

做完之後

透過大哥的 API 去優化完之後

再存成真正你想要的支持文

你這個做得非常好耶

因為我覺得我現在看到

目前最好的就是你這個

為什麼?因為先前他們在整理的時候

是原汁原味

根本沒有透過這些叫做清洗的動作

所以你這個是等於清洗

清洗所有的文件進來的時候的品質嘛

你要轉 TXT 或是轉 Mountdown 的時候

之前就透過 API 去清洗

OK 那個你這件事情完之後

跟蘇美他們再接軌

因為我們再來就是

有一件事情

這小工具一定要讓他們知道

第二件事情

有做清洗的工作還是差很多

因為我未來在做向量化的過程當中

清洗過得會更好

原汁原味的不見得好

我現在是用

我已經我有自己的 IAG 系統

一封信來的時候

Title 這些都會被向量化

所有裡面的元素被向量化

這是我做向量

這一封信到底在講什麼的風險

包括什麼都向量化

本體當然都留著

但是本體要留著

這件事情如果他在

不過他只要進資料庫

他長的什麼鳥樣子

對我來講就無所謂

只是說你會不會會失真

會

因為你透過清洗完之後

代言模型會把你語意直接改掉

對不對

對

因為我是請他彙整成

會總結這個 email 的問題是什麼

對 所以他已經幫你清洗了

就是語意分析了解說

這封信到底在講什麼東西

對不對

所以他不是

就是說縱使那個人的文章很鳥

都會被你整理得漂漂亮亮

對

ok 我大概知道

那你跟文宏那邊再接軌一下

就是說我現在決定

如果未來我在跟

台新在做整併的時候

他的信我要不要被清洗

這件事情是我一直在思考

因為他的東西來的時候

我都會經過分析

所以我已經清洗過了

應該是說我要做向量之前

是清洗過的

也就是說你那信寫得很鳥

可是被我向量化完之後

我向量是了解你這個人是在逃避責任

在幹嘛幹嘛幹嘛

我都很清楚

那個向量的因子是很清楚的

even 你的信很鳥

但是因為保留原汁原味

所以我會把原汁原味的信

放在資料庫裡面

因為到時候要舉證的時候就

因為我現在做的東西是

大概是這樣子

就是說我現在跟你做一件事情的溝通

往來有十封信

這十封信裡面你沒有做好的

做好的那都很清楚

或是時間到沒有做的都很清楚

所以意思是說

那個就是針對十封信的過程當中

做數據分析

那這個數據分析裡面

我有幾千封信的時候

那就不一樣

所以你看那個工程都很好玩

你看我現在隨便講幾千封信

然後你現在可能有一個目的性

在這幾千封信裡面要找出

跟這個行動網營系統有相關的

然後在逃避責任的

舉例啦

這樣子的搜尋你可以做到

非常有效率

你懂我意思嗎

就是說誰在逃避責任

或是時程delay的

或是怎樣

那你看我隨便講一個需求

你就想說這RIG要怎麼做

就這樣子

懂我意思嗎

所以裡面有很多因子就要萃取出來

所以你的清洗

你這個是原文清洗

我那個是什麼

原文裡面再提像量

這樣你會知道很多事情可以好玩的東西

那我跟你講

你這個目前是我聽到最好的資料清洗

也就是說

目前表示你們在

在AI的成長的部分已經踏上一條火熱路

比較像樣的

沒關係,繼續分享下去

所以達哥還是對你們有貢獻啊

我覺得至少你們會去玩嘛

錢不好用是一回事嘛

就是如果接包你會更好用

然後像他其實裡面還有

提取媒體文件

就是他背包裡面的

他們其實做了很多東西

你們再跟淑美他們確定交流一下

因為這些小工具寫完了

應該要可以reuse

然後只是說

剛才我唯一的糾結點是說

我要破壞原文嗎

你這樣懂我意思嗎

我要破壞原文嗎

有一些資訊可能還是會要捨棄掉

太髒了

對,沒辦法完全做轉換

比方說像我現在上傳的這份文件

它是飛波系統的文件手冊

它可能都會有一些

系統畫面的截圖

那系統畫面截圖這個東西

它是有必要被保存下來的嗎

因為你把這個圖

你就算送給AI

他大概給你的describe也是非常中性

可是沒什麼幫助

所以這個文章驚喜的部分

對我來講看起來是

還是認為很有幫助的

不過

但是你因為是用達哥的API

不是要改Cloudy的

了不起是這樣子

OK

因為我們現在案子快要啟動了

而病案快要啟動了

所以這件事情再請他跟我

從這邊

把這個清洗的功能

可能透過API

包括你們剛才API已經吃滿了

想要用公司的你再跟我講

沒問題的啦

你本來就是支持

一下一天他們就給我吃掉30塊美金

你這個開發會吃掉的

應該是很有限

這個是用達哥的

我這個用的是達哥

我未來全部用Cloudy

我真的不share

所有的GPT-01

那些我全部都不喜歡

謝謝

因為那些模型真的不能用

真的差太多了

真的是小學生程度的

有時候

一模一樣的話推出去

到Cloudy

是正確的

到那個O1是完全垃圾

那你說光是這樣子就勝負

立判了

就一模一樣的文章貼上去

comment出來的一個是垃圾

一個是正確的

那我問你

我們沒有加任何提示詞的情況之下

心得分享就差很多

那你覺得能為什麼

所以很多事情是指說

表示他的限制多

表示他理解力差

所以這樣的語言模型

要接觸的我不反對

只是人最怕比較

你知道為什麼

我們工程師也是最怕比較

例如說你寫程式超厲害的

我寫程式很笨

都一樣的問題嘛

人要比較才知道勝負

不比較都不知道有傷害

一比較之後傷害才知道

那比較過的人是沒有看過

世界有多大有多寬有多廣

我只能這樣子講

所以不要忠於一個品牌

對我來看不要忠於一個品牌

因為忠於一個品牌

你最後被那個品牌賣掉

自己還搞不清楚

你還在幫他護航

那個都很奇怪

因為你輸了就是輸了

不要再講了

所以有時候這世界上是在變化

哪時候Jemma來變成最厲害

趕快叫嫂

就是這樣子而已

你還在那邊笨笨的

這個Cloudy最厲害

我跟你講

因為外面也有評論

那有些人是做文學創作的

他覺得

Cloudy很好

你了解我意思嗎

所以有些東西是品牌不一樣

強項不一樣

大圓模型

有勝負

所以我們在看的時候

我們只針對我們的批判是這個

光是知識庫這一塊

他輸到慘

他就輸到慘

他可能針對我們講的

例如說深層圖片或是辨識

或是有一些部分的強項

他可能比較厲害

可是並不代表他什麼都厲害

所以DeepSeeker今天可以取代

變很快是因為

他蒸餾技術完之後

他術業有專攻

這個文學類的

他用五台Server來跟你拼的時候

速度又快分類又準

然後兩個工作一起協調

再回來再收

再透過一個過濾器

我跟你講那個運作效率叫做

協同分工的

一顆那個單顆腦的

還是強太多了

所以我們在講這些技術的時候

那個過程就是一個過程

所以就不要提key

你不要說什麼品牌好不好

你就看他底層技術

就可以知道說

誰的能力是強跟弱

所以我跟你講DeepSeeker的技術

可能偷偷都被人家在使用當中

為什麼?因為我不會去承認

我偷用他的東西

可是我要做到分工我這一個最快

你懂我意思嗎?

我只要有一個分工的模型

回來再收攏再結束

但是我有八顆

就是H200的

我跟你講這大陸就是輸人

就是這個東西沒有

他乾脆就想辦法活嘛

所以他就找一些低階的來處理

你知道嗎

所以低階的就會變成我們以前

叫做

Blockchain的那個概念

有一點那種

那個叫Multicomputing的那種概念

就是說他基本上就是分散

分散到所有的小兵

都可以立大功

然後最後就收攏起來

所以他那個叫Greecomputing

Greecomputing的技術

所以那個Greecomputing就是

你看齁

最後的世界會是這樣子的世界

你看那個駭客攻擊

為什麼可以三軍總司令發動

攻擊!然後全部你被

植木馬的人就晚上

再發封包到某個網站去

就是你被植入木馬

所以你變成一台server在一直送

跟幾千台

幾千萬台的那個PC在那邊送

誰厲害

一定是幾千萬台的PC在送

所以

以現在AI的技術應該

到後面的時候就是類似像

我剛才講的

他因為

多元模型在這邊的時候

三軍總司令一下的時候

每個人分工回來

都是瞬間的

相對就不會從頭跑到尾

那以前

我們就是一台server裡面

本身就有多工技術

那個看似架構

是這樣但事實上那個不一樣

他還是所有的水管

管線都是在那個地方

所以相對他的loading還是重

所以你說

H200然後再來就

GB200然後再上去

會越來越快

可是未來世界是有錢的就是

未來每一台都是GB200

你這樣懂我意思嗎

那就很可怕了

例如說大陸

沒錢是用H20

一百台兩百台

阿現在以後

你用一模一樣的架構

我每一台都是GB200

然後我有兩百台

所以未來誰會強一定是美國

因為大陸被管制

阿他技術

是拿出來

我認為是太早

他等於是幫美國

所以美國在

拿他這個技術完之後

包括那個Meta

或是這些AI公司

都偷偷拿來自己用

因為他是open source

所以

大陸沒事把那個殺招

拿出來

我認為是笨蛋

我認為是快了

底牌現出來

那底牌現出來就是被人家拿去用

我幹嘛承認

我用你的東西

你管我用誰的

反正你也是偷我的啦

就是大陸也是偷他的資料

阿我偷你的技術

一個是偷資料一個是偷技術

你大概知道我意思嗎

一個是釣魚釣的滿滿的

然後我不用去大海

然後直接在裡面釣

就是deep sea

那deep sea裡面

都是低階的嘛

所以他不用訓練

他就是直接釣你那個

已經釣完魚的從大海裡面撈上來的魚

裡面魚池都滿滿的

純度很高

直接在釣

所以他用H200

那H20就可以釣得動

所以他的技術

他不用太高的訓練的東西

但是呢

你已經教會他了

他也會啦

以後訓練模型的速度越來越快

未來的世界我只能跟你講

你們不管怎麼樣

以前在講幻覺啦

我跟你講那個都是過去式

才這麼一年就已經這樣子

我可以跟你們講再過兩年

你們現在找接觸

OK

可能到現在圓的扁的地球是怎麼樣

搞不清楚

包括什麼叫RIT這些都搞不清楚

都沒有關係

未來那個世界

我就只能講

你可以想像現在的狀況

已經到什麼樣的程度

你們現在只是看達哥這種東西

我對你們不成熟

可是我現在做的東西

都已經到成熟到已經是

你在巨人肩膀上成長

就是不一樣

你的事半功倍的效果就不一樣

就像你現在都寫完之後

新人哪會知道你做了什麼東西

就可能說

這個就直接說我要測試

然後就幫我直接就上班了

他那個過程完全不知道耶

因為那個被包起來

那未來被包起來的事情

會越來越多

那我們要成為包的那個人

我們要成為包的那個人

我們不要成為用的那個人

因為用的那個人

他最後的

他說東西很厲害

但是他的鑑別性很差

就是說我這個工程師的鑑別性很差

為什麼

因為未來

大家在強調不用寫程式的時候

我的鑑別性更差

因為未來世界如果不強調寫程式這件事情

那你的鑑別性更差

但是微軟也說一件事情

工程師不會失業

未來只有幾種人會存活

就是一個是工程師

那工程師的鑑別性要差在哪邊

你們思考一下

如果你是

在跟AI競爭的工程師

那你應該很慘

就是他寫程式

你也寫程式

那到底是誰厲害

那你叫他寫程式寫的又2266的

那個勝負就厲害

就是說

一個不會講話的人

叫AI做事情

也是寫出不會講話的AI

一個會寫程式的

很厲害很有架構的人

寫出來就很有架構

所以

各位開始要學高段的部分

就懂得去構思

不會都是片段的

沒有那個點線面

方法論很好

所以我剛才跟你講

方法論我就馬上跟你講

有二階

人外有人天外有天

RAG也有二階的RAG你知道嗎

二階的RAG

你的清洗算是第一階

再進來就是二階的RAG

第三個

第三階叫做專業的RAG

在萃取文本裡面

這個我們在討論的

專案是什麼東西

第三階的RAG

所以我就跟你講這個

這個是玩不玩的東西

應該是說我為什麼比你準

我做出來的模型為什麼比你準

你的模型問東問A答B

很容易是嗎

那個叫做

我也懂AI

有時候你知道嗎

站在高處的人最孤獨

就是看到這個東西也叫AI

你知道我這種感覺是什麼感覺

就是這樣子

因為那個太深了

講下去講不完

為什麼因為它就是有層次

你只做第一層

你沒看到第二層

通常是表面層的人就已經在

打混摸魚就已經招搖撞騙

所以東西不好用

就是這樣子

我們推的東西說我們有AI

我們清光儀能量在推AI

推完之後是什麼樣子

那個就會變成招搖撞騙

所以我還是從事各位

就是說深層

我們在講說比較deep

比較可以讓自己

真正有別於一般的

這個做法

趕快做出來

所以做到底

時間就是燃燒很快

你現在要做到完美

那個時間都燃燒很快

你會覺得時間不夠用

我只能這樣子講

所以學習的時間

真的沒有像你想像有那麼大的空間

可是你進步的時間要快一點

這一點是我替你們

要趕快

跟你們加油的部分

你知道那個進步快

對你來講就是一個最大的幫助

所以你們本身要互相鼓勵

讓大家趕快一起厲害

這樣子就好

那剛才有講過

公司給你們的支持就是這些

API不用錢的沒有問題

那另外研究的部分

要繼續deep下去

那你的清洗的部分

大概給你再按個讚

很棒

謝謝

我就先快速

因為在做這個小工具的過程中

也希望在做這件事的人

他可以快速去理解

產出來的效果好不好

所以也有做一些小工具

我可以直接把markdown

產出來的markdown貼進來

然後在上面去做一個預覽

那你可以去看你的markdown

做出來的效果是不是正確的

讚讚讚

然後

我就先繼續

順著簡報下去

剛剛是提到有這些小工具

可以幫我們快速把markdown

的資料給產出來

但是產出來之後你其實還是要去

挑選哪一些markdown資訊

是你需要的

然後匯成你需要用到的文件

然後剛

我們有看到大哥上面的

RIG

他能夠設定的東西

就我覺得非常的簡單

他能夠設定的東西就是你去選

什麼embedding model去幫你去做

那個RIG的embedding

然後你的chunk size要切多少

overlap設多少

你search出來的資料

最相關的資料要多少

他大概只能做這些設定

所以有一些剛剛資訊長提到的東西

在大哥上面

的DS1是沒辦法去做到

那麼細部的控制

但是RIG這個東西就是大家還是

要去理解它是什麼樣子的東西

所以像

這個小工具就是

方便大家去理解什麼是RIG

我們可以隨便找一個文章或是你會找好的資料

你把它丟進去

丟進去之後跟他講你的

chunk size

他會把它去做一個視覺化的切割

那你就大概可以理解到

RIG到底在幹什麼

他其實就是把你準備好的這些資料

依照你的chunk size然後切成一塊一塊的資料

然後每一塊他還有一個overlap

所以他會跟前一段

有一部分的重疊

跟下一段再有一部分的重疊

那你就可以去理解說

其實你RIG在去做搜尋的時候

他就是去找最相關的區塊

然後為了保留你這個區塊

上下文的完整式

他會再多一部分的

重疊的區塊的資料都一起抓出來

然後把這些資料都組起來

一起送給LM

幫你去做LM的那個

彙整

那可能上下文沒有關係

但是至少連著

那LM他就會幫你

濾到你就是這一段

你的需求就是這一段

那上下文縱使沒關係

至少怎樣

他還是可以精準的知道

你就是要嘛上要嘛下

那所以

因為RIG這塊就是

剛剛志願長講到的東西很多

那如果是自己去做RIG的話

還要很多啦

像剛剛志願長講的

志願長用到的應該就是

我切出來的這個chunk裡面

其實我還可以幫每個chunk去加一個meta

那這個meta可以幫助那個

他去做RIG搜尋的時候

精確的定位到說

我到底相關的區塊是什麼

然後再去看區塊裡面的東西

是不是有什麼東西的相似性

那甚至還有的那個什麼RIG的技術

他把每一個這個chunk的區塊

都是當作

還有一個index在

那這個index他會把它串在一起

那你也可以做那種

跳躍式的index

就是我比方說chunk1跟chunk3是有關係的

chunk2反而關係沒那麼大

所以我還可以做一個index

把chunk1跟chunk3連起來

所以他在做RIG去搜尋的時候

他會把這兩個chunk都一起先拉出來之後

再去看裡面的文字的相似性

就是其實有很多這種東西的做法

那

這些東西因為他彈性比較多

所以這都可能透過自建RIG

才有辦法去達到

好那所以

我們在達哥這邊的方法其實

就已經有了

所以我們可以透過小工具快速去產生

Modem內容

然後再來是我們比較痛苦的這一塊會是

我們取得Modem資料之後

我們要去針對裡面的資料去做一些萃取

把有用的資訊把它留下來

那這部分會比較花時間

那都彙整完了之後

我們其實最後打包商城到DSE裡面

這個痛苦作業基本上就完成了

所以相對我這樣看起來

你的幻覺應該是最少

因為你有做資料清洗

用達哥來講的話

你們算是應該是做得很好

因為這一般人都做不到這樣子

沒看過其他科的資料

沒有沒有但是我覺得你有做清洗

你就已經贏了一等

光是這一點你就贏了一等

因為沒有清洗的話那個效果就會很差

而且你是整理完之後

再用API達哥再

Mail進來再

所以你的知識是乾淨的

而且是非常正規的

就是超正規的知識

那這種東西是

最難能可貴的

就是不會用原汁原味的垃圾

那這個光是

這一點就贏人家在

起跑點上就我先前講的

假設你有一個規格文件對不對

我不要你原生的

這才產生的

就是清洗的作用

因為你人類寫的東西還蠻垃圾

就是不夠正規啦

表格漏東漏西的啦

說明不夠完整的啦

然後一字性不完整的啦

代碼也不OK啦

距離啦就是人類寫的東西就是這麼爛

那你經過整理叫做清洗

清洗完再進資料庫

準確度就提高了

所以沒有透過清洗的

直接這樣子檔案上傳的

大概失敗率就很高

所以我可以

even是你用達哥

應該是沒有那麼糟

對不對

我自己感覺是還行

所以我剛才沒有批

應該是我批評太快

如果你沒有清洗

我以為你又是那種

那大概會非常失望

就你剛才講的那個PDF還有圖片

什麼什麼類似啦

那種東西效果進去就大概很爛

就是懶人手法

你沒有透過那幾個小工具

你今天達不到這些效果

所以我

很肯定你們今天所有的

KM的這個展示

跟我想像的已經是

差別很大的

而且這個是最正確的做法

只是差二維度的

IG或是

其實你要外掛IG也可以喔

我只能跟你講就是說

你再思考一下

想一下你的想像力

你剛才知道那個東西

你可以

給LLM偷一點點東西

來自建你的IG

再透過他的DS

等於你當二房東

再透過他

這個你可以思考一下

我給你一點小hint

意思是說你可以做的

自建的IG也沒有那麼慘

就是

你要當第一層

還是當第二層

你可以選擇你再當第一層的IG

也沒問題

包括你看還是相對關聯的啦

或是搜尋哪些

那些比較複雜的關聯

你就可以自己在那邊

組完之後

他就可以跳藥室的亂來

這個大概給你一些想法

但是你們等實作出來再跟我講

我只是跟你講說

因為分門別類太清楚

互相交際的機率低

所以相對的那個

我剛才講那個效果就不OK

就沒有那麼好

但是如果涉及到

我們剛才講的一些運作工程

或是我們講的SQL的運作實力

你可能你有二維度的

一些狀態出來的時候

你的文本太多的時候

你可能這個方面就可以學以致用

就是

花時間就可以得到效果

跟自己的想法

所以達哥並不是那麼完整的失敗

如果這樣看起來

你有做清洗就差很多

等一下會講到達哥的優點

稍微逆風一下

這邊會提到達哥的優點

就是他的那個parking

基本上就是像剛我們

把DSD的東西上門

然後我們也可以把

我們的一些

自己建的一些API

然後我們也可以把它上傳上去

然後也變成一個parking

那其實達哥的parking

他就是我們最近

上次跟大家分享的

最近很夯的那個NCP

的一種實作方式

那這也是達哥的優點

因為他實作的NCP

所以讓他這個平台的AI在應用上面

他得到了一些能力的擴展

那

就比方說像

就會有那個

有串那個Mermaid Diagram的

API,我們自己架了一個Mermaid Diagram

的服務,然後讓達哥的

AI他知道說他看到

Mermaid Diagram的這個文法的時候

他會去串這個服務

然後去產生一個圖片回來

那

我這邊也有實驗性的

做了一個API

然後這支API他會去串你的Git

可以在跟達哥的對談之中

可以告訴他說

大概是哪一個系統

那達哥會問我說

我要查詢

某一個feature

那我調整了哪一些程式

那達哥會來跟我問說

那你想要查的是哪一個開發的分支

那我想要查詢的關鍵字

我給他我們的頁面單號

那他就可以幫我去串Git

然後把這一個Git相關的

有改過哪一些程式

把這些程式列出來服務

那我就會知道說這次的調整

這個也可以通過DotMeme的方式

下去去做

所以他現在

達哥已經跟你的Git

這個算實驗性的

因為Git是可以串

但是你還是會有技術的問題

要想辦法去克服它

因為它那個Git其實是

它Git提供的那個查詢

其實是查詢在Local過來

所以你Git的那個Repost

你必須要先把它Local回來

所以你現在是串你Local的

這個合理啦

不是Open的Git啦

我現在講的是

不是Open的

但是如果

Local也合理啊

因為我們自己開發

自己也反控的話

可能自己再自己

但你就是要有一些事情要做

比方說你要讓其他人來用

這一個assistant去做查詢的時候

它不一定查詢的是這個專案

你可能是查另外一個系統

那這個時候你就要想辦法去

去一個它這個

它在你B端的這個Repostory

就要切換到另外一個專案的Repostory

才能夠去查到對的資訊

那就是前面提示詞工程

強化吧

對

但是後端對應的這個發言的API

也必須去做這件事情

當我知道你是查哪一個的時候

我可能在後面的這一個API的

執行的過程中

它就要先去做一個Repostory的切換

然後再幫你去執行後續的查詢

然後再把結果

回去給LAM這邊去做處理

所以就還是會有些功課啦

因為這個算比較實驗性的功能

就只能是自己先想辦法

水喔

對 然後所以

所以就是達哥的Programming其實

其實就是一個NCP的應用概念

然後剛剛我們看到這個NCP的圖嘛

其實像我們剛剛看到這些Programming

其實這些就是

我們現在上面看到的Tools

你讓LAM知道有哪一些Tools可以用

那你在跟達哥對話的過程中

它會有一個Choose Action的判斷

它LAM會有一個決策的過程

它會去知道說

我是不是應該要用某一個Tool

來完成你給我的這個任務

它會思考

它會自己去判斷

那只是說它判斷是不是正確

那是另外一回事

因為你還是受限在達哥這個平台

它那個LAM的大腦到底聰不聰明

用Cloudy可能就很聰明了

對啦

一定是比達哥這邊表現得還要好

那所以這個算是達哥平台的優點啦

就是它有去實作這個東西

所以讓它這個平台

稍微有這麼一點

你看我還到這個地方來

所以這個是可以

稱讚它一下下的

好 謝謝

它的限制就會是

如果大家都要可以用的話

因為它的詞可能比較難分享

那在分享上面還是會有一個問題

所以變成你自己架

自己Try可能會有一定的成效

可是其他人要用的時候可能就沒有辦法

然後可能就重新再上載

就是整個工整

或者是有異動的時候

可能都要重新再重複一次

沒有啦

如果是知識庫的異動更新或是怎樣

那個剛才講的那個是天敵啦

基本上你的KM變化的話

你本來就是要重新

你說再重新清洗覺得很煩

那我也只能講就是說

那可能只針對那個Difference的部分

把原來的清洗的

再加上你想要改的

直接告訴它

由它直接改你那個清洗完的結果

就像它現在

它N一樣照進來

可是它的那些File什麼的

因為達哥的設計是存在Browser

所以它連回去

沒有 你現在Server端都在Server端

然後繞不出來啊

它的那個File是存在它的Browser

你上傳的File是在Browser

不是在Server端

這樣喔

這樣就不好啊

因為它除非要上架

上架之後可能就缺了

可是其實好像現在那個上架功能

也有問題

之前

它是以後有開放

但我還沒有試

所以反正現在我連到我電腦

然後這邊的話

我們這邊的那邊資訊庫

而且照你們這樣子玩

一般的使用者

沒辦法玩到這樣

還會資料清洗

你根本就是奢念

你懂我意思嗎

一般的什麼人資

總務

或是一般的End user

還資料清洗

我一聽到這裡的時候

那就是充滿了門檻

對IT來講的話

我覺得這個就是我們

以後的那個Sample

所以事實上沒有到失敗的路

我是覺得這一塊

你們大概就是在結合

那個我能拜託你

現在跟那個文宏他們做交流

就是把你今天跟我講的這些東西

讓他們知道

那他們也要拿他們現在

怎麼去建好IT的系統

自建的那一塊

也讓你們知道

我是覺得雙方做一個

初步的交流

因為資料清洗是一個概念

那對導你們實際應用的人

來講的話

這是一個概念

而不是一個技術

但是呢

如果以純工程師的個性來看的話

他會不知道說

原來資料是要經過清洗

你這樣懂我意思嗎

所以他要建一個KM

他完全沒概念

所以某種程度

懂寫程式的人

不見得懂要怎麼implement架構

這個是我認為

都是很重要的一個

大家要去思考的問題

也就是說

當我看這個

你們的應用的時候

我看到的是什麼

你要用我的眼光去看

我看到的是什麼

如果純粹比技術

就是剛才講的Gips

上傳那個

那個叫做實驗精神

那我看到實驗精神

但是如果以說

我要怎麼去把KM

導得很好這件事情

我看到的是

你們剛才那個

那個整個對RAG的應用

包括資料清洗

這個是一個

讓我覺得是正確

所以我們常常都說

系統有沒有做對的方向

就是這個

如果沒有

就是只是華山論劍

什麼叫華山論劍

我跟你講

我用什麼模型

我用什麼什麼

你知道

就是那叫華山論劍

華山論劍是對我最不屑的

為什麼

因為就是講的

滿口的仁義道德

滿口的專業知識

但是沒辦法

就是沒有辦法implement

所以老實講

你們這種東西就是

我認為不是華山論劍

那給你們稱讚是不錯的

但是只是說

深度還可以再加強

我不是批評

我講的是說

本來這就是一個學習過程

所以達哥給你們帶來的是什麼

就是一個學習的動力

再加上後面對一個東西的理解

但這樣就夠了嗎

這是我要問的問題

這樣就夠了嗎

可能對我來看

任何一門知識

大家要開始學的是

要幹在哪裡

例如說

資料要清洗

要導KM

要怎麼清洗

那個過程是怎麼一回事

如果你到現在還懵懵懂懂的時候

你趕快去加強這一塊

這個才是你要學的

因為你只是純技術

我要用什麼模型

然後我要怎麼呼叫API

那個叫做技術

可是你沒有用的話

就是垃圾

就是你不知道

我給你一台車子

原來車子是要拿來開的

你懂我意思嗎

那個就會變成

我跟你講喔

賓士有什麼功能

它有ACC功能

那ACC功能

在給人家問下去的時候

ACC是什麼東西

就是不懂得應用的人

所以他會講不出來

所以工程師不要淪落到

最後都只是講專業知識

然後最後就不懂

這個是我提醒大家的

就是說

你們開始要開始思考

一個東西的應用

要嘛就給它生殖理性

就給它生殖

生在你心

就是長在你心

阿如果是

一樣化葫蘆

就會似不像

就是

所以我還是非常感動是說

有這樣子的經驗

是非常好的

不管你們是三個人成群

或五個人成群

這個就是你們開始

從這裡面學到真正的東西

那彼此要互相照顧

互相學習

這一點還是持續的

好不好

那我想這個部分

你再跟某某他們

互相交流一下

那我會跟他們講一下

你們這邊做得多好

大概是只說

每一個東西都有一個精神

你們的精神在於

方法論有做到

他的精神可能有些東西還是

還在try

但是都是try裡面去想像的

可是

有時候就是這樣子

因為我們合作習慣了

我都是做上游SA的工作

你就從來沒有經過我的工作

所以你就不知道

原來上面的工作是這麼辛苦

這有時候就是大家不知道

我在做系統分析

你在做寫程式的人

會覺得說就這樣子而已

但系統分析的人

是每天在想什麼

我要資料怎麼清洗

我要怎麼去串聯

我的IG要分幾層

你懂我意思嗎

這就是每個人

不一樣的程度在這邊

所以各位要思考的是說

我們是一個

協同分工的一個社會

我們要怎麼知道

我們現在位置在哪邊

那另外一個

有時候你在下面

一直在做基礎工程的時候

你忘記自己的競爭力

往哪邊去

這個時候我就講

光是剛才講那個資料清洗

就是一個過程

如果沒有去想這個的時候

表示怎樣

你都是

我們要導KM

然後你就會像別組的

我不要講哪一組

我們就丟進去

要換絕

你知道我意思嗎

就是明明都是學IT的

然後最後就講出來說要換絕

然後就一直說這個不好用

我跟你講

這個是我最不喜歡聽到

不夠用心

那我現在看到的是說

我們為什麼會找幾組

你們都是拍了

每個人真的有用心在玩

可是有的人就會忘記

有一些方法論

光是這一次

是我第一次聽到資料清洗

有的人是用大於至誰的圍堵方法

反正資料是垃圾

我想辦法用提示紙

告訴大家

往這邊走

有一組是這樣子

所以他學到的是

負負得正

就是資料是髒的

想辦法負負得正

這個就是我們以前

程式寫死了

哈扣的問題

不正本清源去面對資料

老是負負得正

所以我剛才講

那一萬行的程式

就是負負得正的結果

所有的IT

在面對浮世這個爛奴隸

然後浮世很高興

那請問你學到什麼

學到的是錯誤的觀念

就是一萬行的這種

然後就是複製貼上

解決問題

告訴主管

我寫好了

所以我就講

這是態度、精神跟專業

所以只要看到對的方法論

所以不對的方法論

我剛才講的

那個IT的表現會是怎樣

你這邊這樣子講對不對

我覺得很棒

另外那個IT也說它很棒

我現在用這種方法

來讓大家知道說

你要當哪一種的

你是方法論

直接資料很乾淨

另外一種是提示詞工程

一直一直弄一直弄

結果提示詞工程寫的

寫的幾乎比那個原來的原文還多

為什麼

因為都是一大堆

他問A答B嘛

所以都跟你講,當我問這個的時候,你記得要去這裡

當我問這個的時候,你記得要去這裡

所以他加了自己一大堆index,你知道嗎

就那index已經比本文還多了

那就是我講的

笨蛋工程師在做笨蛋的事情

到最後程式就是寫死

好啦,講點到為止

就是說每個人都曾經當過笨蛋工程師

每個人也曾經會成長過程

那只是讓你們未來有所選擇

也希望未來大家可以工作聰明一點

也希望未來大家可以工作聰明一點

我完全不希望大家對號入座

我完全不希望大家對號入座

我只希望大家知道我在講什麼

我只希望大家知道我在講什麼

我也希望大家以後有很多進步空間

對號入座一點都沒有必要

因為我們都曾經年輕過

我也寫死過程師

可是這個過程越短越好

可是這個過程越短越好

趕快讓自己成長

這樣知道我意思了

這是大家一起要追尋完美的地方

這是大家一起要追尋完美的地方

最後提到資安議題

雖然這次Vive Code

以前AI寫的程式寫得很開心

但是其實裡面還是有用到一些開源的套件

但是其實裡面還是有用到一些開源的套件

去做這些事情

這些開源套件其實自己有先去做一些確認

這些開源套件其實自己有先去做一些確認

這些開源套件其實自己有先去做一些確認

這些東西都是存在已久

這些東西都是存在已久

比較有信譽的一些開源套件

基本上是沒有什麼問題的

可是再來就落地了

可是再來就落地了

可能這些東西也是要跟資安那邊過一下

可能這些東西也是要跟資安那邊過一下

如果真的有要去做使用的話

資安那邊要有一個

我們現在目前在這一塊還沒有

就是少過而已

還沒少

那個少出來也是安全的就好

那個少出來也是安全的就好

我們先試效果

如果方向

沒有的話就先不要理他

我知道只是說規範沒有的話

這一點的時候

是表示我們規範還沒有定好

但是你們要先確定一下安全就好

但是你們要先確定一下安全就好

因為那個程序是這樣子過

公司有程序完之後

就按照程序來查

另外一個是我們現在的責任就是

用新興科技的時候要掌握資安的風險

有沒有CEV

這些事情如果沒有的話

而且你這個開源物件

他本身就是一個執行檔

像pendark的話他是一個執行檔

他會幫你去做轉換

但是他都是open source的東西

那你是拿他的

拿他的source code進來

recompile

不是

是嘛,那就ok

不是直接拿object code

那就ok

好,那各位就

祝你們蒸蒸日上

好不好,越來越厲害

那工作上

大概也給大家提點一下

未來就是玉環會比較辛苦一點

你就找一個,就是未來你們只要支持

就是說規格一開出來的時候

隔天就寫好這樣最快

我覺得最好的回饋就是

讓所有的事情

都做得很快

然後把自己經營到

技術也可以成長

這才是要的

不然做得慢吞吞的對大家

也沒有好處

二來是怎樣,就是

謀生命嘛,那我是覺得

盡量把我剛才講的公司的營運

各方面做得很有效率

然後把自己的技能

跟知識要極大化

那極大化對大家

還是真的有幫助的

你也找不到這種環境

所以要慢只是個人

但是群體的力量還是

重要的,因為群體力量

才可以促使大家更上一層樓

所以今天沒有達哥可以玩

你就沒有那個力量

沒有那個力量就沒有共識

所以就沒有那個互動

所以三五成群

然後去做

那先前你們有不少的分享

有包含copilot各方面

可是各位不要忘了

要記得不斷的switch

不要堅守崗位

到最後的時候都已經

就是換品牌

不是問題

但換知識成長是重點

了解嗎

就是說應用AI做什麼事情

每個人各有所需

但是呢重點是

要朝對的方向

對自己累積的方向來用

那相對的才是真正有幫助

那不是為AI而AI

那也沒有意義

因為我剛有講

工程師有好幾項

那如果今天是敢流行說我用AI

那也沒有意思

所以有時候變成是酸葡萄

酸葡萄的意思是說

AI沒在騙

說實在你是怎麼用的

那跟有沒有

叫騙無關

你連SA都做不好

你怎麼做好AI

我剛講話都講不清楚了

AI怎麼會好

所以你的架構邏輯不好

就會像我剛講的

你每天在做的事情

是重複的

而且是沒有效率的

所以AI用的好不好

是在於你的SA的能力好不好

那SA能不能訓練

也可以訓練

因為你發現話講不清楚

第二次你就會清楚

然後你的規格你的思考

跟著大家一起成長

這件事情就是說

有比較才會進步

沒有比較就活在

自己的象牙塔世界

所以我會告訴我自己

我現在AI

假設我是領先的

我要永遠領先下去

意思是什麼意思

不要忘了

明天會變成怎樣

所以你看我有時候給你們一些東西

你還在畫簡報

你還在自己弄一個

然後慢慢做

我早就給他們一個napkin

你現在有幾個重點

把這幾個重點畫成一張小圖

以往的做法

慢慢刻

慢慢弄

現在一分鐘就搞定

所以要活在石器時代

你可以活在石器時代

那只能跟你講

很多事情已經不是石器時代的事情

所以該去做轉換

就去轉換

所以你們應該是算不錯

都有一些可以互相學習成長

所以把握好這些

讓組織更強壯

讓系統更穩定

然後要督促

督促你們的科長

要會轉智做好一點

好啦那就先這樣子

好不好

好

沒關係

你再跟

那邊一定要交流

因為我覺得今天看到的東西

未來我們那個案子也需要用到

我覺得它

應該是可以

把它整合出去那邊

你那個小工具的部分

要弄